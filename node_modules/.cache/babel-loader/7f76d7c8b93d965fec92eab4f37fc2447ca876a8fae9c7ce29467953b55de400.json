{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\GITHUB\\\\QENCODE\\\\contentful-mult-upload\\\\src\\\\locations\\\\ConfigScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useEffect } from 'react';\n// import { Heading, Form, Paragraph, Flex } from '@contentful/f36-components';\nimport { Checkbox, TextInput, Form, FormControl } from '@contentful/f36-components';\n// import { css } from 'emotion';\nimport { /* useCMA, */useSDK } from '@contentful/react-apps-toolkit';\nimport { Spinner } from '@contentful/f36-components';\nimport queryString from 'query-string';\nimport configScreenStyles from \"./ConfigScreen.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ConfigScreen = () => {\n  _s();\n  // codecs map for UI\n  let codecs = new Map([[\"libx264\", \"H.264\"], [\"libx265\", \"H.265\"], [\"libvpx\", \"VP8\"], [\"libvpx-vp9\", \"VP9\"], [\"libaom-av1\", \"AV1\"]]);\n  const apiUrl = \"https://api.qencode.com/v1/\";\n  const [parameters, setParameters] = useState({\n    apikeyqencodeApiKey: \"\",\n    templates: [],\n    // Assuming templates is a part of parameters\n    CMA_token: ''\n  });\n  const [showCMAToken, setShowCMAToken] = useState(false);\n  const [savedApiKey, setSavedApiKey] = useState(\"\");\n  const [isValidatingApiKey, setIsValidatingApiKey] = useState(false);\n  const [isValidationSuccess, setIsValidationSuccess] = useState(false);\n  const [isCancellingKeyValidation, setIsCancellingKeyValidation] = useState(false);\n  const [error, setError] = useState(null);\n  const sdk = useSDK();\n  /*\n     To use the cma, inject it as follows.\n     If it is not needed, you can remove the next line.\n  */\n  // const cma = useCMA();\n\n  // ORIGINAL\n  const onConfigure = useCallback(async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await sdk.app.getCurrentState();\n    const contentTypeID = \"qencodeTranscodedAsset\";\n    const contentTypeName = \"Video\";\n\n    // const contentTypeID = \"qencodeAsset_05\";\n    // const contentTypeName = \"Qencode Job 05\";\n\n    const subsContentTypeID = \"subsItem\";\n    const subsContentTypeName = \"Subtitles Item\";\n    try {\n      // Check if the content type already exists\n\n      // Check if the content type exists\n      const contentTypes = await sdk.cma.contentType.getMany();\n\n      // Check and create SRT content type\n      const subsContentTypeExists = contentTypes.items.some(contentType => contentType.sys.id === subsContentTypeID);\n      if (subsContentTypeExists) {\n        console.log(`Content type with ID \"${subsContentTypeID}\" exists.`);\n      }\n      if (!subsContentTypeExists) {\n        const newContentType = await sdk.cma.contentType.createWithId({\n          contentTypeId: subsContentTypeID\n        }, {\n          name: subsContentTypeName,\n          displayField: \"title\",\n          // Display field\n          fields: [{\n            id: \"title\",\n            name: \"Title\",\n            type: \"Symbol\",\n            localized: false,\n            required: false,\n            validations: [],\n            disabled: false,\n            omitted: false\n          }, {\n            id: \"language\",\n            name: \"Language\",\n            type: \"Symbol\",\n            // Text field for the SRT file name\n            required: true\n          }, {\n            id: \"file\",\n            name: \"File\",\n            type: \"Link\",\n            linkType: \"Asset\",\n            // Link to the SRT file asset\n            required: true\n          }]\n        });\n        console.log(`Content type \"${newContentType.name}\" created with ID \"${newContentType.sys.id}\".`);\n\n        // publish this new content type\n        const publishedContentType = await sdk.cma.contentType.publish({\n          contentTypeId: newContentType.sys.id\n        }, newContentType);\n        console.log(`Content type \"${publishedContentType.name}\" published with ID \"${publishedContentType.sys.id}\".`);\n\n        // await sdk.cma.contentType.publish({ contentTypeId: subsContentTypeID }, srtContentType);\n      }\n\n      // creating and adding main content type\n\n      const contentTypeExists = contentTypes.items.some(contentType => contentType.sys.id === contentTypeID);\n      if (contentTypeExists) {\n        console.log(`Content type with ID \"${contentTypeID}\" exists.`);\n\n        // this will add extra field to existing content type, so old user can just reconfigure the app without reinstalling\n\n        // Retrieve the existing content type\n        const existingContentType = await sdk.cma.contentType.get({\n          contentTypeId: contentTypeID\n        });\n\n        // Check if the 'subs' field exists\n        const subsFieldExists = existingContentType.fields.some(field => field.id === 'subs');\n        if (!subsFieldExists) {\n          // Add the 'subs' field to the content type\n          const updatedFields = existingContentType.fields.concat([{\n            id: \"subs\",\n            name: \"Subtitles (optional)\",\n            type: \"Array\",\n            items: {\n              type: \"Link\",\n              linkType: \"Entry\",\n              validations: [{\n                linkContentType: [subsContentTypeID]\n              }] // Links to Subtitles Items\n            }\n          }]);\n\n          // Update the content type with the new field\n          const updatedContentType = await sdk.cma.contentType.update({\n            contentTypeId: contentTypeID,\n            version: existingContentType.sys.version // Important: provide the current version\n          }, {\n            ...existingContentType,\n            fields: updatedFields\n          });\n          console.log(`Content type \"${updatedContentType.name}\" updated with new 'subs' field.`);\n        }\n\n        // update fields to required\n        if (subsFieldExists) {\n          // Assuming `subsContentTypeID` holds the ID of your 'subs' content type\n          const subsContentType = await sdk.cma.contentType.get({\n            contentTypeId: subsContentTypeID\n          });\n\n          // Flag to track if an update is needed\n          let updateNeeded = false;\n\n          // Check fields and update required property if not already true\n          const fieldsToUpdate = subsContentType.fields.map(field => {\n            if ((field.id === \"language\" || field.id === \"file\") && !field.required) {\n              updateNeeded = true; // Set flag to true if any field needs updating\n              return {\n                ...field,\n                required: true\n              };\n            }\n            return field;\n          });\n\n          // Proceed with update if needed\n          if (updateNeeded) {\n            // Prepare the updated content type object\n            const updatedSubsContentType = {\n              ...subsContentType,\n              fields: fieldsToUpdate\n            };\n\n            // Update and publish the content type\n            await sdk.cma.contentType.update({\n              contentTypeId: subsContentTypeID,\n              version: subsContentType.sys.version\n            }, updatedSubsContentType);\n            console.log(`Content type \"${subsContentTypeID}\" updated: 'Language' and 'File' fields set as required.`);\n          } else {\n            console.log(`No update required for content type \"${subsContentTypeID}\": 'Language' and 'File' fields already set as required.`);\n          }\n        }\n      }\n\n      // If content type doesn't exist, create it\n      if (!contentTypeExists) {\n        const newContentType = await sdk.cma.contentType.createWithId({\n          contentTypeId: contentTypeID\n        }, {\n          name: contentTypeName,\n          displayField: \"title\",\n          // Display field\n          fields: [{\n            id: \"title\",\n            name: \"Title\",\n            type: \"Symbol\",\n            localized: false,\n            required: false,\n            validations: [],\n            disabled: false,\n            omitted: false\n          }, {\n            id: \"task_data\",\n            name: \"Transcoding Data\",\n            type: \"Object\",\n            localized: false,\n            required: false,\n            validations: [],\n            disabled: false,\n            omitted: false\n          }, {\n            id: \"media\",\n            name: \"Media\",\n            type: \"Link\",\n            localized: false,\n            required: false,\n            validations: [],\n            disabled: false,\n            omitted: false,\n            linkType: \"Asset\"\n          }, {\n            id: \"subs\",\n            name: \"Subtitles (optional)\",\n            type: \"Array\",\n            items: {\n              type: \"Link\",\n              linkType: \"Entry\",\n              validations: [{\n                linkContentType: [subsContentTypeID]\n              }]\n            }\n          }]\n        });\n        console.log(`Content type \"${newContentType.name}\" created with ID \"${newContentType.sys.id}\".`);\n\n        // publish this new content type\n        const publishedContentType = await sdk.cma.contentType.publish({\n          contentTypeId: newContentType.sys.id\n        }, newContentType);\n        console.log(`Content type \"${publishedContentType.name}\" published with ID \"${publishedContentType.sys.id}\".`);\n      }\n    } catch (error) {\n      console.error('Error creating content type:', error);\n      return false;\n    }\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState\n    };\n  }, [parameters, sdk]);\n  useEffect(() => {\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    sdk.app.onConfigure(() => onConfigure());\n  }, [sdk, onConfigure]);\n  useEffect(() => {\n    (async () => {\n      // Get current parameters of the app.\n      // If the app is not installed yet, `parameters` will be `null`.\n      const currentParameters = await sdk.app.getParameters();\n      if (currentParameters) {\n        setParameters(currentParameters);\n      }\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      sdk.app.setReady();\n    })();\n  }, [sdk]);\n  const getTemplates = async () => {\n    console.log('Getting templates...');\n    const data = {\n      api_key: parameters.apikeyqencodeApiKey\n    };\n    try {\n      const response = await fetch(`${apiUrl}request_templates`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: queryString.stringify(data)\n      });\n      const result = await response.json();\n      if (result.success) {\n        setIsValidatingApiKey(false);\n        setIsValidationSuccess(true);\n        setError('');\n        const templates = result.templates.map(template => {\n          return {\n            id: template.template_id,\n            enabled: false,\n            originalName: template.name,\n            name: template.name,\n            description: '',\n            query: template.query\n          };\n        });\n        setParameters({\n          ...parameters,\n          templates: templates\n        });\n      } else {\n        console.log('Error:', result.error);\n        setError(result.error);\n        setParameters({\n          ...parameters,\n          templates: []\n        });\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const validateApiKey = async () => {\n    console.log('Validating API key...');\n\n    // Update state to show spinner and clean templates\n    setIsValidatingApiKey(true);\n    setIsCancellingKeyValidation(false);\n\n    // Remove templates from parameters state\n    setParameters({\n      ...parameters,\n      templates: []\n    });\n\n    // Send request to get templates (assuming you have a function getTemplates)\n    // This function should also update the state when templates are received\n    await getTemplates();\n  };\n  const changeApiKey = () => {\n    console.log('Changing API key...');\n    setIsValidatingApiKey(false);\n    setIsValidationSuccess(false);\n    setIsCancellingKeyValidation(true);\n    setSavedApiKey(parameters.apikeyqencodeApiKey);\n  };\n  const cancelApiKeyValidation = () => {\n    console.log('Cancel API key validation...');\n\n    // Restore the value in the input to the savedApiKey or default\n    setParameters({\n      ...parameters,\n      apikeyqencodeApiKey: savedApiKey || ''\n    });\n    setIsValidatingApiKey(false);\n    setIsValidationSuccess(true);\n    setIsCancellingKeyValidation(false);\n  };\n  const handleCheckboxChange = () => {\n    setShowCMAToken(!showCMAToken);\n  };\n  const handleCMATokenChange = e => {\n    setParameters({\n      ...parameters,\n      CMA_token: e.target.value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: configScreenStyles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this), \" API Key / Account Validation\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: configScreenStyles.validationBox,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"API Key\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: configScreenStyles.inputContainer,\n          children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: configScreenStyles.errorMessage,\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: error && configScreenStyles.error,\n            type: isValidationSuccess ? \"password\" : \"text\",\n            disabled: isValidationSuccess ? true : false,\n            value: parameters.apikeyqencodeApiKey || \"\",\n            onChange: e => setParameters({\n              ...parameters,\n              apikeyqencodeApiKey: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 13\n          }, this), !isValidatingApiKey && !isValidationSuccess && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: validateApiKey,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Validate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 17\n          }, this), isValidatingApiKey && /*#__PURE__*/_jsxDEV(\"button\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Validating\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 15\n          }, this), isValidationSuccess && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: changeApiKey,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Change API Key\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 15\n          }, this), isCancellingKeyValidation && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: cancelApiKeyValidation,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this), parameters.templates && parameters.templates.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }, this), \" Choose templates to display\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 11\n      }, this), parameters.templates.map((template, index) => {\n        let {\n          format\n        } = JSON.parse(template.query).query;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: template.enabled ? `${configScreenStyles.templateContainer} ${configScreenStyles.enabled}` : configScreenStyles.templateContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: configScreenStyles.templateHeader,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: configScreenStyles.checkboxSwitchContainer,\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: template.enabled,\n                    onChange: e => {\n                      let updatedTemplates = [...parameters.templates];\n                      updatedTemplates[index].enabled = e.currentTarget.checked;\n                      setParameters({\n                        ...parameters,\n                        templates: updatedTemplates\n                      });\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 486,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: configScreenStyles.checkboxSwitchSlider\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 499,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: configScreenStyles.templateTitle,\n                children: template.originalName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: configScreenStyles.formatListContainer,\n                children: format.map((formatItem, i) => {\n                  let {\n                    output\n                  } = formatItem;\n                  let {\n                    stream\n                  } = formatItem;\n                  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                    children: stream ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: [output && /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: configScreenStyles.formatOutput,\n                        children: output.split('_')[1]\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 520,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: configScreenStyles.formatVideoCodec,\n                        children: codecs.get(stream[0].video_codec)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 527,\n                        columnNumber: 33\n                      }, this), stream.map((streamFormat, i) => {\n                        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                          children: streamFormat.width && /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: configScreenStyles.formatWidth,\n                            children: streamFormat.width\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 537,\n                            columnNumber: 41\n                          }, this)\n                        }, i, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 535,\n                          columnNumber: 37\n                        }, this);\n                      })]\n                    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: [output && /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: configScreenStyles.formatOutput,\n                        children: output\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 552,\n                        columnNumber: 35\n                      }, this), formatItem.video_codec && /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: configScreenStyles.formatVideoCodec,\n                        children: codecs.get(formatItem.video_codec)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 560,\n                        columnNumber: 35\n                      }, this), formatItem.width && /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: configScreenStyles.formatWidth,\n                        children: formatItem.width\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 570,\n                        columnNumber: 35\n                      }, this)]\n                    }, void 0, true)\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 516,\n                    columnNumber: 27\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 17\n          }, this), template.enabled && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: configScreenStyles.templateBody,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Display Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 590,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: template.name,\n                onChange: e => {\n                  let updatedTemplates = [...parameters.templates];\n                  updatedTemplates[index].name = e.currentTarget.value;\n                  setParameters({\n                    ...parameters,\n                    templates: updatedTemplates\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 591,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Description (optional)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: template.description,\n                onChange: e => {\n                  let updatedTemplates = [...parameters.templates];\n                  updatedTemplates[index].description = e.currentTarget.value;\n                  setParameters({\n                    ...parameters,\n                    templates: updatedTemplates\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 607,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          children: /*#__PURE__*/_jsxDEV(Checkbox, {\n            id: \"cmaTokenCheckbox\",\n            isChecked: showCMAToken,\n            onChange: handleCheckboxChange,\n            children: \"CMA Token (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 11\n        }, this), showCMAToken && /*#__PURE__*/_jsxDEV(FormControl, {\n          children: /*#__PURE__*/_jsxDEV(TextInput, {\n            width: \"medium\",\n            type: \"text\",\n            id: \"cmaTokenInput\",\n            name: \"cmaToken\",\n            value: parameters.CMA_token,\n            onChange: handleCMATokenChange,\n            placeholder: \"Enter your CMA Token\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 5\n  }, this);\n};\n_s(ConfigScreen, \"RhtT/KQOe36Qexr8CZNXJRIFrzo=\", false, function () {\n  return [useSDK];\n});\n_c = ConfigScreen;\nexport default ConfigScreen;\nvar _c;\n$RefreshReg$(_c, \"ConfigScreen\");","map":{"version":3,"names":["React","useCallback","useState","useEffect","Checkbox","TextInput","Form","FormControl","useSDK","Spinner","queryString","configScreenStyles","jsxDEV","_jsxDEV","Fragment","_Fragment","ConfigScreen","_s","codecs","Map","apiUrl","parameters","setParameters","apikeyqencodeApiKey","templates","CMA_token","showCMAToken","setShowCMAToken","savedApiKey","setSavedApiKey","isValidatingApiKey","setIsValidatingApiKey","isValidationSuccess","setIsValidationSuccess","isCancellingKeyValidation","setIsCancellingKeyValidation","error","setError","sdk","onConfigure","currentState","app","getCurrentState","contentTypeID","contentTypeName","subsContentTypeID","subsContentTypeName","contentTypes","cma","contentType","getMany","subsContentTypeExists","items","some","sys","id","console","log","newContentType","createWithId","contentTypeId","name","displayField","fields","type","localized","required","validations","disabled","omitted","linkType","publishedContentType","publish","contentTypeExists","existingContentType","get","subsFieldExists","field","updatedFields","concat","linkContentType","updatedContentType","update","version","subsContentType","updateNeeded","fieldsToUpdate","map","updatedSubsContentType","targetState","currentParameters","getParameters","setReady","getTemplates","data","api_key","response","fetch","method","headers","body","stringify","result","json","success","template","template_id","enabled","originalName","description","query","validateApiKey","changeApiKey","cancelApiKeyValidation","handleCheckboxChange","handleCMATokenChange","e","target","value","className","container","children","fileName","_jsxFileName","lineNumber","columnNumber","validationBox","inputContainer","errorMessage","onChange","onClick","length","index","format","JSON","parse","templateContainer","templateHeader","checkboxSwitchContainer","checked","updatedTemplates","currentTarget","checkboxSwitchSlider","templateTitle","formatListContainer","formatItem","i","output","stream","formatOutput","split","formatVideoCodec","video_codec","streamFormat","width","formatWidth","templateBody","isChecked","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Desktop/GITHUB/QENCODE/contentful-mult-upload/src/locations/ConfigScreen.jsx"],"sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\n// import { Heading, Form, Paragraph, Flex } from '@contentful/f36-components';\nimport { Checkbox, TextInput, Form, FormControl  } from '@contentful/f36-components';\n// import { css } from 'emotion';\nimport { /* useCMA, */ useSDK } from '@contentful/react-apps-toolkit';\n\nimport { Spinner } from '@contentful/f36-components';\n\nimport queryString from 'query-string'\n\nimport configScreenStyles from \"./ConfigScreen.module.css\"\n\nconst ConfigScreen = () => {\n\n  // codecs map for UI\n  let codecs = new Map([\n    [\"libx264\", \"H.264\"],\n    [\"libx265\", \"H.265\"],\n    [\"libvpx\", \"VP8\"],\n    [\"libvpx-vp9\", \"VP9\"],\n    [\"libaom-av1\", \"AV1\"]\n  ]); \n\n  const apiUrl = \"https://api.qencode.com/v1/\";\n\n  const [parameters, setParameters] = useState({\n      apikeyqencodeApiKey: \"\",\n      templates: [], // Assuming templates is a part of parameters\n      CMA_token: ''\n  });\n\n  const [showCMAToken, setShowCMAToken] = useState(false);\n\n  const [savedApiKey, setSavedApiKey] = useState(\"\")\n  const [isValidatingApiKey, setIsValidatingApiKey] = useState(false)\n  const [isValidationSuccess, setIsValidationSuccess] = useState(false)\n  const [isCancellingKeyValidation, setIsCancellingKeyValidation] = useState(false)\n  const [error, setError] = useState(null)\n\n  const sdk = useSDK();\n  /*\n     To use the cma, inject it as follows.\n     If it is not needed, you can remove the next line.\n  */\n  // const cma = useCMA();\n\n \n  // ORIGINAL\n  const onConfigure = useCallback(async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await sdk.app.getCurrentState();\n\n    const contentTypeID = \"qencodeTranscodedAsset\";\n    const contentTypeName = \"Video\";\n\n    // const contentTypeID = \"qencodeAsset_05\";\n    // const contentTypeName = \"Qencode Job 05\";\n\n    const subsContentTypeID = \"subsItem\";\n    const subsContentTypeName = \"Subtitles Item\";\n\n    try {\n      // Check if the content type already exists\n\n      // Check if the content type exists\n      const contentTypes = await sdk.cma.contentType.getMany();\n\n      // Check and create SRT content type\n      const subsContentTypeExists = contentTypes.items.some((contentType) => contentType.sys.id === subsContentTypeID);\n\n      if (subsContentTypeExists) {\n        console.log(`Content type with ID \"${subsContentTypeID}\" exists.`);\n      }       \n\n      if (!subsContentTypeExists) {\n        const newContentType = await sdk.cma.contentType.createWithId({\n          contentTypeId: subsContentTypeID\n        }, {\n          name: subsContentTypeName,\n          displayField: \"title\", // Display field\n          fields: [\n            {\n              id: \"title\",\n              name: \"Title\",\n              type: \"Symbol\",\n              localized: false,\n              required: false,\n              validations: [],\n              disabled: false,\n              omitted: false,\n            },\n            {\n              id: \"language\",\n              name: \"Language\",\n              type: \"Symbol\", // Text field for the SRT file name\n              required: true\n            },\n            {\n              id: \"file\",\n              name: \"File\",\n              type: \"Link\",\n              linkType: \"Asset\", // Link to the SRT file asset\n              required: true\n            }\n          ]\n        });\n\n        console.log(`Content type \"${newContentType.name}\" created with ID \"${newContentType.sys.id}\".`);\n\n        // publish this new content type\n        const publishedContentType = await sdk.cma.contentType.publish({\n            contentTypeId: newContentType.sys.id\n          }, newContentType)\n        console.log(`Content type \"${publishedContentType.name}\" published with ID \"${publishedContentType.sys.id}\".`);        \n\n        // await sdk.cma.contentType.publish({ contentTypeId: subsContentTypeID }, srtContentType);\n      }\n\n   \n      // creating and adding main content type\n\n      const contentTypeExists = contentTypes.items.some((contentType) => contentType.sys.id === contentTypeID);\n\n      if (contentTypeExists) {\n        console.log(`Content type with ID \"${contentTypeID}\" exists.`);\n\n        // this will add extra field to existing content type, so old user can just reconfigure the app without reinstalling\n\n        // Retrieve the existing content type\n        const existingContentType = await sdk.cma.contentType.get({ contentTypeId: contentTypeID });\n\n        // Check if the 'subs' field exists\n        const subsFieldExists = existingContentType.fields.some(field => field.id === 'subs');\n\n        if (!subsFieldExists) {\n          // Add the 'subs' field to the content type\n          const updatedFields = existingContentType.fields.concat([{\n            id: \"subs\",\n            name: \"Subtitles (optional)\",\n            type: \"Array\",\n            items: {\n              type: \"Link\",\n              linkType: \"Entry\",\n              validations: [{ linkContentType: [subsContentTypeID] }] // Links to Subtitles Items\n            }\n          }]);\n\n          // Update the content type with the new field\n          const updatedContentType = await sdk.cma.contentType.update({\n            contentTypeId: contentTypeID,\n            version: existingContentType.sys.version // Important: provide the current version\n          }, {\n            ...existingContentType,\n            fields: updatedFields\n          });\n\n          console.log(`Content type \"${updatedContentType.name}\" updated with new 'subs' field.`);   \n        }     \n\n        // update fields to required\n        if (subsFieldExists) {\n          // Assuming `subsContentTypeID` holds the ID of your 'subs' content type\n          const subsContentType = await sdk.cma.contentType.get({ contentTypeId: subsContentTypeID });\n        \n          // Flag to track if an update is needed\n          let updateNeeded = false;\n        \n          // Check fields and update required property if not already true\n          const fieldsToUpdate = subsContentType.fields.map(field => {\n            if ((field.id === \"language\" || field.id === \"file\") && !field.required) {\n              updateNeeded = true; // Set flag to true if any field needs updating\n              return { ...field, required: true };\n            }\n            return field;\n          });\n        \n          // Proceed with update if needed\n          if (updateNeeded) {\n            // Prepare the updated content type object\n            const updatedSubsContentType = {\n              ...subsContentType,\n              fields: fieldsToUpdate\n            };\n        \n            // Update and publish the content type\n            await sdk.cma.contentType.update({\n              contentTypeId: subsContentTypeID,\n              version: subsContentType.sys.version\n            }, updatedSubsContentType);\n        \n            console.log(`Content type \"${subsContentTypeID}\" updated: 'Language' and 'File' fields set as required.`);\n          } else {\n            console.log(`No update required for content type \"${subsContentTypeID}\": 'Language' and 'File' fields already set as required.`);\n          }\n        }\n        \n        \n\n      } \n\n      // If content type doesn't exist, create it\n      if (!contentTypeExists) {\n        const newContentType = await sdk.cma.contentType.createWithId({\n          contentTypeId: contentTypeID\n        }, {\n          name: contentTypeName,\n          displayField: \"title\", // Display field\n          fields: [\n            {\n              id: \"title\",\n              name: \"Title\",\n              type: \"Symbol\",\n              localized: false,\n              required: false,\n              validations: [],\n              disabled: false,\n              omitted: false,\n            },\n            {\n              id: \"task_data\",\n              name: \"Transcoding Data\",\n              type: \"Object\",\n              localized: false,\n              required: false,\n              validations: [],\n              disabled: false,\n              omitted: false,\n            },        \n            {\n              id: \"media\",\n              name: \"Media\",\n              type: \"Link\",\n              localized: false,\n              required: false,\n              validations: [],\n              disabled: false,\n              omitted: false,\n              linkType: \"Asset\",\n            },\n            {\n              id: \"subs\",\n              name: \"Subtitles (optional)\",\n              type: \"Array\",\n              items: {\n                type: \"Link\",\n                linkType: \"Entry\",\n                validations: [{ linkContentType: [subsContentTypeID] }]\n              },\n            }\n          ],\n        });\n        console.log(`Content type \"${newContentType.name}\" created with ID \"${newContentType.sys.id}\".`);\n\n        // publish this new content type\n        const publishedContentType = await sdk.cma.contentType.publish({\n            contentTypeId: newContentType.sys.id\n          }, newContentType)\n        console.log(`Content type \"${publishedContentType.name}\" published with ID \"${publishedContentType.sys.id}\".`);\n\n        \n      }\n    } catch (error) {\n        console.error('Error creating content type:', error);\n        return false;\n    }\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    };\n  }, [parameters, sdk]);  \n  \n\n  useEffect(() => {\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    sdk.app.onConfigure(() => onConfigure());\n  }, [sdk, onConfigure]);\n\n  useEffect(() => {\n    (async () => {\n      // Get current parameters of the app.\n      // If the app is not installed yet, `parameters` will be `null`.\n      const currentParameters = await sdk.app.getParameters();\n      if (currentParameters) {\n        setParameters(currentParameters);\n      }\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      sdk.app.setReady();\n    })();\n  }, [sdk]);\n\n\n  const getTemplates = async () => {\n    console.log('Getting templates...');\n\n    const data = { api_key: parameters.apikeyqencodeApiKey };\n\n    try {\n      const response = await fetch(`${apiUrl}request_templates`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: queryString.stringify(data),\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        setIsValidatingApiKey(false);\n        setIsValidationSuccess(true);\n        setError('');\n\n        const templates = result.templates.map((template) => {\n          return {\n            id: template.template_id,\n            enabled: false,\n            originalName: template.name,\n            name: template.name,\n            description: '',\n            query: template.query,\n          };\n        });\n\n        setParameters({\n          ...parameters,\n          templates: templates,\n        });\n      } else {\n        console.log('Error:', result.error);\n        setError(result.error);\n\n        setParameters({\n          ...parameters,\n          templates: [],\n        });\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const validateApiKey = async () => {\n    console.log('Validating API key...');\n\n    // Update state to show spinner and clean templates\n    setIsValidatingApiKey(true);\n    setIsCancellingKeyValidation(false);\n\n    // Remove templates from parameters state\n    setParameters({\n      ...parameters,\n      templates: [],\n    });\n\n    // Send request to get templates (assuming you have a function getTemplates)\n    // This function should also update the state when templates are received\n    await getTemplates();\n  };  \n\n  const changeApiKey = () => {\n    console.log('Changing API key...');\n\n    setIsValidatingApiKey(false);\n    setIsValidationSuccess(false);\n    setIsCancellingKeyValidation(true);\n    setSavedApiKey(parameters.apikeyqencodeApiKey);\n  };\n\n  const cancelApiKeyValidation = () => {\n    console.log('Cancel API key validation...');\n\n    // Restore the value in the input to the savedApiKey or default\n    setParameters({\n      ...parameters,\n      apikeyqencodeApiKey: savedApiKey || '',\n    });\n\n    setIsValidatingApiKey(false);\n    setIsValidationSuccess(true);\n    setIsCancellingKeyValidation(false);\n  };\n\n  const handleCheckboxChange = () => {\n    setShowCMAToken(!showCMAToken);\n  };\n\n  const handleCMATokenChange = (e) => {\n    setParameters({...parameters, CMA_token: e.target.value});\n  };\n\n  return (\n    <div className={configScreenStyles.container}>\n      <section>\n        <h2>\n          <span>1</span> API Key / Account Validation\n        </h2>\n\n        <div className={configScreenStyles.validationBox}>\n          <label>API Key</label>\n\n          <div className={configScreenStyles.inputContainer}>\n\n            {error && (\n              <div className={configScreenStyles.errorMessage}>\n                {error}\n              </div>\n            )}\n\n            <input\n              className={error && configScreenStyles.error}\n              type={isValidationSuccess ? \"password\" : \"text\"}\n              disabled={isValidationSuccess ? true : false}\n              value={parameters.apikeyqencodeApiKey || \"\"}\n              onChange={(e) =>\n                setParameters({\n                  ...parameters,\n                  apikeyqencodeApiKey: e.target.value,\n                })\n              }\n            />\n\n            {!isValidatingApiKey &&\n              !isValidationSuccess && \n                <button onClick={validateApiKey}>\n                  <span>Validate</span>\n                </button>\n            }\n\n            {isValidatingApiKey && \n              <button>\n                <span>Validating</span> <Spinner />\n              </button>\n            }\n\n            {isValidationSuccess && (\n              <button onClick={changeApiKey}>\n                <span>Change API Key</span>\n              </button>\n            )}\n\n            {isCancellingKeyValidation && (\n              <button onClick={cancelApiKeyValidation}>\n                <span>Cancel</span>\n              </button>\n            )}\n\n          </div>\n        </div>\n      </section>\n\n\n      {parameters.templates && parameters.templates.length > 0 && (\n        <section>\n          <h2>\n            <span>2</span> Choose templates to display\n          </h2>\n\n          {parameters.templates.map((template, index) => {\n            let { format } = JSON.parse(template.query).query;\n\n            return (\n              <div\n                key={index}\n                className={\n                  template.enabled\n                    ? `${configScreenStyles.templateContainer} ${configScreenStyles.enabled}`\n                    : configScreenStyles.templateContainer\n                }\n              >\n                <div className={configScreenStyles.templateHeader}>\n                  <div>\n                    <div className={configScreenStyles.checkboxSwitchContainer}>\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={template.enabled}\n                          onChange={(e) => {\n                            let updatedTemplates = [...parameters.templates];\n                            updatedTemplates[index].enabled =\n                              e.currentTarget.checked;\n                            setParameters({\n                              ...parameters,\n                              templates: updatedTemplates,\n                            });\n                          }}\n                        />\n                        <span\n                          className={configScreenStyles.checkboxSwitchSlider}\n                        ></span>\n                      </label>\n                    </div>\n                    <div className={configScreenStyles.templateTitle}>\n                      {template.originalName}\n                    </div>\n                  </div>\n\n                  <div>\n                    <div className={configScreenStyles.formatListContainer}>\n                      {format.map((formatItem, i) => {\n                        let { output } = formatItem;\n                        let { stream } = formatItem;\n\n                        return (\n                          <React.Fragment key={i}>\n                            {stream ? (\n                              <>\n                                {output && (\n                                  <div\n                                    className={configScreenStyles.formatOutput}\n                                  >\n                                    {output.split('_')[1]}\n                                  </div>\n                                )}\n\n                                <div\n                                  className={configScreenStyles.formatVideoCodec}\n                                >\n                                  {codecs.get(stream[0].video_codec)}\n                                </div>\n\n                                {stream.map((streamFormat, i) => {\n                                  return (\n                                    <React.Fragment key={i}>\n                                      {streamFormat.width && (\n                                        <div\n                                          className={\n                                            configScreenStyles.formatWidth\n                                          }\n                                        >\n                                          {streamFormat.width}\n                                        </div>\n                                      )}\n                                    </React.Fragment>\n                                  );\n                                })}\n                              </>\n                            ) : (\n                              <>\n                                {output && (\n                                  <div\n                                    className={configScreenStyles.formatOutput}\n                                  >\n                                    {output}\n                                  </div>\n                                )}\n\n                                {formatItem.video_codec && (\n                                  <div\n                                    className={\n                                      configScreenStyles.formatVideoCodec\n                                    }\n                                  >\n                                    {codecs.get(formatItem.video_codec)}\n                                  </div>\n                                )}\n\n                                {formatItem.width && (\n                                  <div\n                                    className={\n                                      configScreenStyles.formatWidth\n                                    }\n                                  >\n                                    {formatItem.width}\n                                  </div>\n                                )}\n                              </>\n                            )}\n                          </React.Fragment>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n\n                {template.enabled && (\n                  <div className={configScreenStyles.templateBody}>\n                    <div>\n                      <label>Display Name</label>\n                      <input\n                        type=\"text\"\n                        value={template.name}\n                        onChange={(e) => {\n                          let updatedTemplates = [...parameters.templates];\n                          updatedTemplates[index].name = e.currentTarget.value;\n                          setParameters({\n                            ...parameters,\n                            templates: updatedTemplates,\n                          });\n                        }}\n                      />\n                    </div>\n\n                    <div>\n                      <label>Description (optional)</label>\n                      <input\n                        type=\"text\"\n                        value={template.description}\n                        onChange={(e) => {\n                          let updatedTemplates = [...parameters.templates];\n                          updatedTemplates[index].description =\n                            e.currentTarget.value;\n                          setParameters({\n                            ...parameters,\n                            templates: updatedTemplates,\n                          });\n                        }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </section>\n      )}\n\n      <section>\n        <Form>\n          <FormControl>\n            <Checkbox\n              id=\"cmaTokenCheckbox\"\n              isChecked={showCMAToken}\n              onChange={handleCheckboxChange}\n            >\n              CMA Token (Optional)\n            </Checkbox>            \n          </FormControl>\n          \n          {showCMAToken && (\n            <FormControl>\n              <TextInput\n                width=\"medium\"\n                type=\"text\"\n                id=\"cmaTokenInput\"\n                name=\"cmaToken\"\n                value={parameters.CMA_token}\n                onChange={handleCMATokenChange}\n                placeholder=\"Enter your CMA Token\"\n              />\n            </FormControl>\n          )}            \n          \n        </Form>\n\n      \n\n      </section>\n      \n    </div>\n  );\n\n};\nexport default ConfigScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}