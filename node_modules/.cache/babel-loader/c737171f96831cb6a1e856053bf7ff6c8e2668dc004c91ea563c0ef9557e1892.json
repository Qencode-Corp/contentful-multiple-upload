{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\GITHUB\\\\QENCODE\\\\contentful-mult-upload\\\\src\\\\locations\\\\Page.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\n// import { Paragraph } from '@contentful/f36-components';\nimport { Form, FormControl, Heading, Paragraph, Flex, Card, Text, Spinner } from '@contentful/f36-components';\nimport { DoneIcon } from '@contentful/f36-icons';\nimport { /* useCMA, */useSDK } from '@contentful/react-apps-toolkit';\nimport { v4 as uuidv4 } from \"uuid\";\n\n//import { generateSignedUrl } from '../utils/sign-url'\n\nimport DragAndDropUpload from '../components/DragAndDropUpload';\nimport ProgressBar from '../components/ProgressBar';\nimport { RandomizedFileName } from '../utils/filenameUtils';\nimport { QencodeApiRequest } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page = () => {\n  _s();\n  const sdk = useSDK();\n\n  /*\n     To use the cma, inject it as follows.\n     If it is not needed, you can remove the next line.\n  */\n  // const cma = useCMA();\n\n  // Extract apikey and templates from parameters\n  const {\n    apikeyqencodeApiKey\n  } = sdk.parameters.installation;\n  const {\n    templates\n  } = sdk.parameters.installation;\n  const {\n    CMA_token\n  } = sdk.parameters.installation;\n  const CONTENT_TYPE_ID = 'qencodeTranscodedAsset';\n\n  // Filter templates where 'enabled' field is true\n  const enabledTemplates = templates.filter(template => template.enabled === true);\n  const [uploadProgress, setUploadProgress] = useState([]);\n  const updateTaskData = useCallback(async (entryId, taskData) => {\n    try {\n      // Retrieve the current entry\n      const currentEntry = await sdk.cma.entry.get({\n        entryId\n      });\n\n      // Update the `task_data` field\n      currentEntry.fields.task_data = {\n        'en-US': taskData // Adjust locale as needed\n      };\n\n      // Update the entry in Contentful\n      const updatedEntry = await sdk.cma.entry.update({\n        entryId,\n        version: currentEntry.sys.version // Provide the current version\n      }, currentEntry);\n      console.log(\"Entry updated with task_data:\", updatedEntry);\n    } catch (error) {\n      console.error('Error updating entry with task_data:', error);\n    }\n  }, [sdk]);\n  const startTranscodingForTemplates = useCallback(async (publishedEntry, videoSrc) => {\n    console.log(\"apikeyqencodeApiKey: \", apikeyqencodeApiKey);\n    console.log(\"videoSrc: \", videoSrc);\n\n    // Function to initialize the Qencode API client\n    const getAccessToken = async () => {\n      try {\n        // const qencodeApiClient = new QencodeApiClient(apikeyqencodeApiKey);\n\n        const result = await QencodeApiRequest(\"access_token\", {\n          api_key: apikeyqencodeApiKey\n        });\n        return result;\n      } catch (error) {\n        console.error('Error getting Qencode access token:', error);\n        return null;\n      }\n    };\n\n    // Function to create task\n    const createTask = async token => {\n      try {\n        const result = await QencodeApiRequest(\"create_task\", {\n          token: token\n        });\n        return result;\n      } catch (error) {\n        console.error('Error creating Qencode task:', error);\n        return null;\n      }\n    };\n\n    // Function to start transcoding job\n    const startTranscoding = async (task_token, queryJSON) => {\n      try {\n        let result = await QencodeApiRequest(\"start_encode2\", {\n          task_token: task_token,\n          query: queryJSON,\n          payload: 'contentful'\n        });\n        return result;\n      } catch (error) {\n        console.error('Error creating Qencode task:', error);\n        return null;\n      }\n    };\n\n    // initialize task_data that will be added to entry\n    let task_data = {\n      transcodingStarted: true,\n      videoSrc: videoSrc\n    };\n    const {\n      error,\n      message,\n      token\n    } = await getAccessToken();\n    console.log(\"access token: \", token);\n    if (error !== 0 && message) {\n      console.error(\"Error getting access token:\", message);\n      task_data.error = message;\n      // Update task_data field with the error message\n      await updateTaskData(publishedEntry.sys.id, task_data);\n      return; // Exit if there's an error\n    }\n    let transcodingJobs = []; // Temporary array to hold new transcoding jobs\n\n    // all transcoding will be here\n    if (error === 0 && token) {\n      // Rest of your transcoding logic\n      for (let template of enabledTemplates) {\n        console.log(\"Start transcoding job for template...\");\n\n        /////////////////////////////////////////////////////////\n\n        const {\n          error,\n          task_token,\n          message\n        } = await createTask(token);\n        console.log(\"task_token: \", task_token);\n        if (error !== 0 && message) {\n          task_data.error = message;\n          await updateTaskData(publishedEntry.sys.id, task_data);\n          return;\n        }\n        if (error === 0 && task_token) {\n          // start transcoding\n          // https://www.radiantmediaplayer.com/media/big-buck-bunny-360p.mp4\n\n          // transoding based on source file as url\n\n          let query = JSON.parse(template.query);\n          query.query.source = `https:${videoSrc}`;\n          let uuid = uuidv4();\n          query.query.format = query.query.format.map(format => {\n            let {\n              destination,\n              output,\n              file_extension,\n              image_format\n            } = format;\n            if (destination) {\n              // destination can be object or can be array of objects\n              if (typeof destination === \"object\") {\n                destination.url = RandomizedFileName({\n                  url: destination.url,\n                  output,\n                  file_extension,\n                  image_format,\n                  uuid\n                });\n              } else {\n                // this is array of objects\n                destination = destination.map(item => {\n                  item.url = RandomizedFileName({\n                    url: item.url,\n                    output,\n                    file_extension,\n                    image_format,\n                    uuid\n                  });\n                  return item;\n                });\n              }\n            }\n            console.log(\"format: \", format);\n            return format;\n          });\n\n          //console.log(\"query: \", query)\n\n          let queryJSON = JSON.stringify(query);\n          console.log(\"queryJSON: \", queryJSON);\n          const transcodingResult = await startTranscoding(task_token, queryJSON);\n          console.log(\"transcodingResult: \", transcodingResult);\n          let {\n            status_url,\n            error: transcodingError,\n            message\n          } = transcodingResult;\n          if (transcodingError !== 0 && message) {\n            task_data.error = message;\n            await updateTaskData(publishedEntry.sys.id, task_data);\n            return;\n          }\n          if (transcodingError === 0 && status_url) {\n            // setTranscodingJobs\n            const newTranscodingJob = {\n              taskToken: task_token,\n              statusUrl: status_url,\n              templateName: template.name\n            };\n            transcodingJobs.push(newTranscodingJob); // Add to temporary array\n\n            // // Retrieve the current task_data, if it exists\n            // let currentTaskData = publishedEntry.fields.task_data ? publishedEntry.fields.task_data['en-US'] : {};\n            // currentTaskData.transcodingJobs = currentTaskData.transcodingJobs || [];\n            // currentTaskData.transcodingJobs.push(newTranscodingJob);\n\n            // // Update task_data field\n            // await updateTaskData(publishedEntry.sys.id, currentTaskData);           \n          }\n        }\n      }\n\n      // After all jobs are processed, update task_data with the complete transcodingJobs array\n      try {\n        // let currentEntry = await sdk.cma.entry.get({ entryId: publishedEntry.sys.id });\n        // let currentTaskData = currentEntry.fields.task_data ? currentEntry.fields.task_data['en-US'] : {};\n\n        // // Merge existing transcodingJobs with new ones\n        // const updatedTranscodingJobs = currentTaskData.transcodingJobs ? [...currentTaskData.transcodingJobs, ...transcodingJobs] : transcodingJobs;\n        // currentTaskData.transcodingJobs = updatedTranscodingJobs;\n\n        task_data.transcodingJobs = transcodingJobs;\n        await updateTaskData(publishedEntry.sys.id, task_data);\n\n        // // Update the entry in Contentful\n        // currentEntry.fields.task_data = { 'en-US': currentTaskData };\n        // const updatedEntry = await sdk.cma.entry.update({\n        //   entryId: publishedEntry.sys.id,\n        //   version: currentEntry.sys.version, // It's important to provide the current version\n        // }, currentEntry);\n\n        //console.log(\"Entry updated with all transcodingJobs: \", updatedEntry);\n      } catch (error) {\n        console.error('Error updating entry with transcodingJobs:', error);\n      }\n    }\n  }, [apikeyqencodeApiKey, enabledTemplates, updateTaskData]);\n  const createAndPublishEntry = useCallback(async publishedAsset => {\n    try {\n      const entryProps = {\n        fields: {\n          title: {\n            'en-US': publishedAsset.fields.title['en-US']\n          },\n          media: {\n            'en-US': {\n              sys: {\n                id: publishedAsset.sys.id,\n                linkType: 'Asset',\n                type: 'Link'\n              }\n            }\n          }\n          // Add other fields as needed\n        }\n      };\n      const entry = await sdk.cma.entry.create({\n        contentTypeId: CONTENT_TYPE_ID\n      }, entryProps);\n      console.log(\"Entry created: \", entry);\n      const publishedEntry = await sdk.cma.entry.publish({\n        entryId: entry.sys.id\n      }, entry);\n      console.log(\"Entry published: \", publishedEntry);\n\n      // after entry is published, start transcoding and update task_data\n      // const videoSrc = publishedAsset.fields.file[\"en-US\"].url;\n      // startTranscodingForTemplates(publishedEntry, videoSrc)\n\n      return publishedEntry;\n      // return {}\n    } catch (error) {\n      console.error('Error creating or publishing entry:', error);\n    }\n  }, [sdk.cma.entry]);\n  async function customUploadMethod(file, accessToken, spaceId, environmentId, onProgress) {\n    // Define the URL for Contentful's upload API\n    const uploadUrl = `https://upload.contentful.com/spaces/${spaceId}/uploads`;\n\n    // Use XMLHttpRequest for upload to listen to progress events\n    return new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.open('POST', uploadUrl, true);\n\n      // Set the Authorization header with the access token\n      xhr.setRequestHeader('Authorization', `Bearer ${accessToken}`);\n\n      // Set the Content-Type header to application/octet-stream\n      xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n\n      // Listen for progress events\n      xhr.upload.onprogress = function (event) {\n        if (event.lengthComputable) {\n          let percentComplete = event.loaded / event.total * 100;\n          let roundedPercentComplete = Math.round(percentComplete);\n          console.log(`Upload progress: ${roundedPercentComplete}%`);\n          onProgress(roundedPercentComplete); // Call the onProgress callback with the progress percentage\n        }\n      };\n\n      // Handle the response\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          // Parse the JSON response\n          const response = JSON.parse(xhr.responseText);\n          resolve(response);\n        } else {\n          reject(new Error('Upload failed with status: ' + xhr.status));\n        }\n      };\n\n      // Handle network errors\n      xhr.onerror = function () {\n        reject(new Error('Network error occurred during upload'));\n      };\n\n      // Send the request with the file data directly\n      xhr.send(file);\n    });\n  }\n  const handleFileChangeProgress = useCallback(async files => {\n    // const files = event.target.files;\n    if (files.length === 0) {\n      console.error('No files selected');\n      return;\n    }\n    setUploadProgress([]); // Reset upload progress state\n\n    // Assume accessToken is retrieved from your app's configuration or installation parameters\n    const accessToken = CMA_token;\n    const spaceId = sdk.ids.space; // SDK should provide space ID\n    const environmentId = sdk.ids.environment; // SDK should provide environment ID\n\n    //console.log(\"accessToken: \", accessToken)\n    console.log(\"spaceId: \", spaceId);\n    console.log(\"environmentId: \", environmentId);\n\n    // return;\n\n    Array.from(files).map(async (file, index) => {\n      // Initialize progress for this file\n      // setUploadProgress(prev => [...prev, { name: file.name, progress: 0, status: \"uploading\" }]);\n\n      // setUploadProgress(prev => [...prev, {\n      //   name: file.name,\n      //   progress: 0,\n      //   status: \"uploading\",\n      //   assetCreated: false,\n      //   assetProcessed: false,\n      //   assetPublished: false,\n      //   entryPublished: false,\n      //   transcodingStarted: false\n      // }]); \n\n      setUploadProgress(prev => [...prev, {\n        name: file.name,\n        progress: 0,\n        status: \"uploading\",\n        processingStatus: 'uploading media',\n        // 'Asset Created', 'Asset Processed', 'Asset Published', 'Entry Published', 'Transcoding Started'\n        processingFinished: false\n      }]);\n      try {\n        // Step 1: Create Upload\n\n        // Replace the following with a method that supports progress tracking\n        // and uses the access token for authorization\n        // const upload = await customUploadMethod(file, accessToken, spaceId, environmentId);        \n\n        // Use customUploadMethod with progress callback\n        const upload = await customUploadMethod(file, accessToken, spaceId, environmentId, progress => {\n          // Update progress state for this file\n          setUploadProgress(prev => prev.map((item, idx) => idx === index ? {\n            ...item,\n            progress\n          } : item));\n        });\n        console.log(\"upload: \", upload);\n\n        // After successful upload, update status to \"completed\"\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, status: \"completed\" } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? {\n          ...item,\n          processingStatus: \"upload completed\"\n        } : item));\n\n        //return;\n\n        const uploadId = upload.sys.id;\n        console.log(\"uploadId: \", uploadId);\n\n        // Step 2: Create an Asset linking to the Upload\n        const assetProps = {\n          fields: {\n            title: {\n              'en-US': file.name\n            },\n            file: {\n              'en-US': {\n                fileName: file.name,\n                contentType: file.type,\n                uploadFrom: {\n                  sys: {\n                    type: \"Link\",\n                    linkType: \"Upload\",\n                    id: uploadId\n                  }\n                }\n              }\n            }\n          }\n        };\n        const asset = await sdk.cma.asset.create({}, assetProps);\n        console.log(\"Asset created: \", asset);\n\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, assetCreated: true } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? {\n          ...item,\n          processingStatus: \"asset created\"\n        } : item));\n\n        // Step 3: Process the asset for a specific locale\n        const processedAsset = await sdk.cma.asset.processForLocale({}, asset, 'en-US');\n        console.log(\"processedAsset: \", processedAsset);\n\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, assetProcessed: true } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? {\n          ...item,\n          processingStatus: \"asset processed\"\n        } : item));\n\n        // Step 4: Publish the processed asset\n        const publishedAsset = await sdk.cma.asset.publish({\n          assetId: processedAsset.sys.id\n        }, {\n          sys: processedAsset.sys,\n          assetProps: assetProps\n        });\n        console.log(\"Asset published: \", publishedAsset);\n\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, assetPublished: true } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? {\n          ...item,\n          processingStatus: \"asset published\"\n        } : item));\n\n        // create and publish entry, transcoding starts there\n        const publishedEntry = await createAndPublishEntry(publishedAsset);\n        console.log('Published Entry:', publishedEntry);\n\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, entryPublished: true } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? {\n          ...item,\n          processingStatus: \"entry published\"\n        } : item));\n\n        // start transcoding after asset is published\n        const videoSrc = publishedAsset.fields.file[\"en-US\"].url;\n        startTranscodingForTemplates(publishedEntry, videoSrc);\n\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, transcodingStarted: true } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? {\n          ...item,\n          processingStatus: \"transcoding started\"\n        } : item));\n      } catch (error) {\n        console.error(`Failed to upload and publish asset: ${file.name}`, error);\n\n        // On error, update status to \"failed\"\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, status: \"failed\" } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? {\n          ...item,\n          status: \"failed\",\n          processingStatus: \"failed\"\n        } : item));\n        return null; // Return null in case of error\n      }\n    });\n  }, [sdk.cma.asset, sdk.ids, createAndPublishEntry, CMA_token, startTranscodingForTemplates]);\n\n  // Wrap the fetch function with useCallback to memoize it\n  const fetchContentTypeFields = useCallback(async () => {\n    try {\n      // Replace 'yourContentTypeId' with your actual content type ID\n      const contentTypeId = CONTENT_TYPE_ID;\n      const contentType = await sdk.cma.contentType.get({\n        contentTypeId\n      });\n      console.log('Fields for content type:', contentType.fields);\n    } catch (error) {\n      console.error('Error fetching content type fields:', error);\n    }\n  }, [sdk]); // Add sdk as a dependency\n\n  // Use useEffect to call the fetch function on component mount\n  useEffect(() => {\n    fetchContentTypeFields();\n  }, [fetchContentTypeFields]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      padding: \"spacingL\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        children: \"Multiple media upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n        children: \"Here you can upload multiple media assets. Content for Qencode app will be created based on those media assets and transcoding will be initiated based on selected Transcoding Templates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          children: /*#__PURE__*/_jsxDEV(DragAndDropUpload, {\n            onFilesAdded: handleFileChangeProgress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: \"row\",\n        gap: \"spacingS\",\n        flexWrap: \"wrap\",\n        children: uploadProgress.map(file => /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            marginBottom: '20px',\n            width: \"250px\",\n            minWdth: \"250px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\",\n              whiteSpace: \"nowrap\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: file.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n            progress: file.progress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              marginRight: \"spacingXs\",\n              children: [\"Status: \", file.processingStatus]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 21\n            }, this), file.processingStatus !== \"transcoding started\" && file.processingStatus !== \"failed\" && /*#__PURE__*/_jsxDEV(Spinner, {\n              size: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 555,\n              columnNumber: 23\n            }, this), file.processingStatus === \"transcoding started\" && /*#__PURE__*/_jsxDEV(DoneIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 74\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 19\n          }, this)]\n        }, file.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 518,\n    columnNumber: 5\n  }, this);\n};\n_s(Page, \"WbBR0ub6na6RqBh5L26LwSMhtKc=\", false, function () {\n  return [useSDK];\n});\n_c = Page;\nexport default Page;\n\n// import React from 'react';\n// import { Paragraph } from '@contentful/f36-components';\n// import { /* useCMA, */ useSDK } from '@contentful/react-apps-toolkit';\n\n// const Page = () => {\n//   const sdk = useSDK();\n//   /*\n//      To use the cma, inject it as follows.\n//      If it is not needed, you can remove the next line.\n//   */\n//   // const cma = useCMA();\n\n//   return <Paragraph>Hello Page Component (AppId: {sdk.ids.app})</Paragraph>;\n// };\n\n// export default Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","Form","FormControl","Heading","Paragraph","Flex","Card","Text","Spinner","DoneIcon","useSDK","v4","uuidv4","DragAndDropUpload","ProgressBar","RandomizedFileName","QencodeApiRequest","jsxDEV","_jsxDEV","Page","_s","sdk","apikeyqencodeApiKey","parameters","installation","templates","CMA_token","CONTENT_TYPE_ID","enabledTemplates","filter","template","enabled","uploadProgress","setUploadProgress","updateTaskData","entryId","taskData","currentEntry","cma","entry","get","fields","task_data","updatedEntry","update","version","sys","console","log","error","startTranscodingForTemplates","publishedEntry","videoSrc","getAccessToken","result","api_key","createTask","token","startTranscoding","task_token","queryJSON","query","payload","transcodingStarted","message","id","transcodingJobs","JSON","parse","source","uuid","format","map","destination","output","file_extension","image_format","url","item","stringify","transcodingResult","status_url","transcodingError","newTranscodingJob","taskToken","statusUrl","templateName","name","push","createAndPublishEntry","publishedAsset","entryProps","title","media","linkType","type","create","contentTypeId","publish","customUploadMethod","file","accessToken","spaceId","environmentId","onProgress","uploadUrl","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","upload","onprogress","event","lengthComputable","percentComplete","loaded","total","roundedPercentComplete","Math","round","onload","status","response","responseText","Error","onerror","send","handleFileChangeProgress","files","length","ids","space","environment","Array","from","index","prev","progress","processingStatus","processingFinished","idx","uploadId","assetProps","fileName","contentType","uploadFrom","asset","processedAsset","processForLocale","assetId","fetchContentTypeFields","children","flexDirection","padding","_jsxFileName","lineNumber","columnNumber","onFilesAdded","gap","flexWrap","style","marginBottom","width","minWdth","overflow","textOverflow","whiteSpace","justifyContent","alignItems","marginRight","size","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Desktop/GITHUB/QENCODE/contentful-mult-upload/src/locations/Page.jsx"],"sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\n// import { Paragraph } from '@contentful/f36-components';\nimport { Form, FormControl, Heading, Paragraph, Flex, Card, Text, Spinner} from '@contentful/f36-components';\nimport { DoneIcon } from '@contentful/f36-icons';\nimport { /* useCMA, */ useSDK } from '@contentful/react-apps-toolkit';\n\nimport { v4 as uuidv4 } from \"uuid\";\n\n//import { generateSignedUrl } from '../utils/sign-url'\n\nimport DragAndDropUpload from '../components/DragAndDropUpload';\nimport ProgressBar from '../components/ProgressBar';\n\nimport { RandomizedFileName } from '../utils/filenameUtils';\nimport { QencodeApiRequest } from '../services/api';\n\nconst Page = () => {\n  const sdk = useSDK();\n\n  /*\n     To use the cma, inject it as follows.\n     If it is not needed, you can remove the next line.\n  */\n  // const cma = useCMA();\n\n  // Extract apikey and templates from parameters\n  const { apikeyqencodeApiKey } = sdk.parameters.installation;\n  const { templates } = sdk.parameters.installation;\n  const { CMA_token } = sdk.parameters.installation;\n\n  const CONTENT_TYPE_ID = 'qencodeTranscodedAsset'\n\n  // Filter templates where 'enabled' field is true\n  const enabledTemplates = templates.filter(template => template.enabled === true);\n\n  const [uploadProgress, setUploadProgress] = useState([]);\n\n  const updateTaskData = useCallback(async (entryId, taskData) => {\n    try {\n      // Retrieve the current entry\n      const currentEntry = await sdk.cma.entry.get({ entryId });\n  \n      // Update the `task_data` field\n      currentEntry.fields.task_data = {\n        'en-US': taskData, // Adjust locale as needed\n      };\n  \n      // Update the entry in Contentful\n      const updatedEntry = await sdk.cma.entry.update({\n        entryId,\n        version: currentEntry.sys.version, // Provide the current version\n      }, currentEntry);\n  \n      console.log(\"Entry updated with task_data:\", updatedEntry);\n    } catch (error) {\n      console.error('Error updating entry with task_data:', error);\n    }\n  },[sdk]);\n  \n\n  const startTranscodingForTemplates = useCallback(async (publishedEntry, videoSrc) => {\n    console.log(\"apikeyqencodeApiKey: \", apikeyqencodeApiKey)\n    console.log(\"videoSrc: \", videoSrc)\n\n    // Function to initialize the Qencode API client\n    const getAccessToken = async () => {\n      try {\n        // const qencodeApiClient = new QencodeApiClient(apikeyqencodeApiKey);\n\n        const result = await QencodeApiRequest(\"access_token\", {\n          api_key: apikeyqencodeApiKey,\n        });\n\n        return result;\n      } catch (error) {\n        console.error('Error getting Qencode access token:', error);\n        return null;\n      }\n    };\n\n    // Function to create task\n    const createTask = async (token) => {\n      try {\n        const result = await QencodeApiRequest(\"create_task\", {\n            token: token,\n        });        \n\n        return result;\n      } catch (error) {\n        console.error('Error creating Qencode task:', error);\n        return null;\n      }\n    };\n\n    // Function to start transcoding job\n    const startTranscoding = async (task_token, queryJSON) => {\n      try {        \n        let result = await QencodeApiRequest(\"start_encode2\", {\n          task_token: task_token,\n          query: queryJSON,\n          payload: 'contentful'\n        });        \n\n        return result;\n      } catch (error) {\n        console.error('Error creating Qencode task:', error);\n        return null;\n      }\n    };      \n\n    // initialize task_data that will be added to entry\n    let task_data = {\n      transcodingStarted: true,\n      videoSrc: videoSrc\n    }\n\n    const { error, message, token }  = await getAccessToken();\n    console.log(\"access token: \", token)\n\n    if (error !== 0 && message) {\n      console.error(\"Error getting access token:\", message);\n      task_data.error = message\n      // Update task_data field with the error message\n      await updateTaskData(publishedEntry.sys.id, task_data);\n      return; // Exit if there's an error\n    }\n\n\n    let transcodingJobs = []; // Temporary array to hold new transcoding jobs\n\n    // all transcoding will be here\n    if (error === 0 && token) {\n      // Rest of your transcoding logic\n      for (let template of enabledTemplates) {\n        console.log(\"Start transcoding job for template...\")\n\n        /////////////////////////////////////////////////////////\n\n        const { error, task_token, message }  = await createTask(token);\n        console.log(\"task_token: \", task_token)\n\n        if (error !== 0 && message) {\n          task_data.error = message\n          await updateTaskData(publishedEntry.sys.id, task_data);\n          return;\n        }\n\n        if (error === 0 && task_token) {\n          // start transcoding\n          // https://www.radiantmediaplayer.com/media/big-buck-bunny-360p.mp4\n\n          // transoding based on source file as url\n\n          let query = JSON.parse(template.query);\n\n          query.query.source = `https:${videoSrc}`;\n\n          let uuid = uuidv4();    \n\n          query.query.format = query.query.format.map((format) => {\n\n            let { destination, output, file_extension, image_format } = format;\n\n            if (destination) {\n              // destination can be object or can be array of objects\n              if (typeof destination === \"object\") {\n                destination.url = RandomizedFileName({\n                  url: destination.url,\n                  output, \n                  file_extension, \n                  image_format,\n                  uuid\n                });                \n              } else {\n                // this is array of objects\n                destination = destination.map((item) => {\n                  item.url = RandomizedFileName({\n                      url: item.url,\n                      output, \n                      file_extension, \n                      image_format,\n                      uuid\n                  });                  \n                  return item;\n                });\n              }\n            }\n\n            console.log(\"format: \", format)\n\n            return format;\n          });\n\n          //console.log(\"query: \", query)\n\n          let queryJSON = JSON.stringify(query);\n\n          console.log(\"queryJSON: \", queryJSON)\n\n          const transcodingResult = await startTranscoding(task_token, queryJSON);\n          console.log(\"transcodingResult: \", transcodingResult)\n\n          let { status_url, error: transcodingError, message } = transcodingResult;\n\n          if (transcodingError !== 0 && message) {\n            task_data.error = message\n            await updateTaskData(publishedEntry.sys.id, task_data);\n            return;\n          }\n\n          if (transcodingError === 0 && status_url) {\n            // setTranscodingJobs\n            const newTranscodingJob = {\n                taskToken: task_token,\n                statusUrl: status_url,\n                templateName: template.name,\n            }\n\n            transcodingJobs.push(newTranscodingJob); // Add to temporary array\n\n            // // Retrieve the current task_data, if it exists\n            // let currentTaskData = publishedEntry.fields.task_data ? publishedEntry.fields.task_data['en-US'] : {};\n            // currentTaskData.transcodingJobs = currentTaskData.transcodingJobs || [];\n            // currentTaskData.transcodingJobs.push(newTranscodingJob);\n\n            // // Update task_data field\n            // await updateTaskData(publishedEntry.sys.id, currentTaskData);           \n\n          }\n        }\n\n\n      }\n  \n      // After all jobs are processed, update task_data with the complete transcodingJobs array\n      try {\n        // let currentEntry = await sdk.cma.entry.get({ entryId: publishedEntry.sys.id });\n        // let currentTaskData = currentEntry.fields.task_data ? currentEntry.fields.task_data['en-US'] : {};\n\n        // // Merge existing transcodingJobs with new ones\n        // const updatedTranscodingJobs = currentTaskData.transcodingJobs ? [...currentTaskData.transcodingJobs, ...transcodingJobs] : transcodingJobs;\n        // currentTaskData.transcodingJobs = updatedTranscodingJobs;\n\n        task_data.transcodingJobs = transcodingJobs;\n        await updateTaskData(publishedEntry.sys.id, task_data);   \n\n        // // Update the entry in Contentful\n        // currentEntry.fields.task_data = { 'en-US': currentTaskData };\n        // const updatedEntry = await sdk.cma.entry.update({\n        //   entryId: publishedEntry.sys.id,\n        //   version: currentEntry.sys.version, // It's important to provide the current version\n        // }, currentEntry);\n\n        //console.log(\"Entry updated with all transcodingJobs: \", updatedEntry);\n      } catch (error) {\n        console.error('Error updating entry with transcodingJobs:', error);\n      } \n\n    }\n\n\n  }, [apikeyqencodeApiKey, enabledTemplates, updateTaskData]);  \n\n\n  const createAndPublishEntry = useCallback(async (publishedAsset) => {\n    try {\n      const entryProps = {\n        fields: {\n          title: {\n            'en-US': publishedAsset.fields.title['en-US'],\n          },\n          media: {\n            'en-US': {\n              sys: {\n                id: publishedAsset.sys.id,\n                linkType: 'Asset',\n                type: 'Link',\n              },\n            },\n          },\n          // Add other fields as needed\n        },\n      };\n\n      const entry = await sdk.cma.entry.create({ contentTypeId: CONTENT_TYPE_ID }, entryProps);\n      console.log(\"Entry created: \", entry);\n\n      const publishedEntry = await sdk.cma.entry.publish({ entryId: entry.sys.id }, entry);\n      console.log(\"Entry published: \", publishedEntry);\n\n      // after entry is published, start transcoding and update task_data\n      // const videoSrc = publishedAsset.fields.file[\"en-US\"].url;\n      // startTranscodingForTemplates(publishedEntry, videoSrc)\n\n      return publishedEntry;\n      // return {}\n    } catch (error) {\n      console.error('Error creating or publishing entry:', error);\n    }\n  },[sdk.cma.entry]);\n\n\n  async function customUploadMethod(file, accessToken, spaceId, environmentId, onProgress) {\n    // Define the URL for Contentful's upload API\n    const uploadUrl = `https://upload.contentful.com/spaces/${spaceId}/uploads`;\n  \n    // Use XMLHttpRequest for upload to listen to progress events\n    return new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.open('POST', uploadUrl, true);\n  \n      // Set the Authorization header with the access token\n      xhr.setRequestHeader('Authorization', `Bearer ${accessToken}`);\n\n      // Set the Content-Type header to application/octet-stream\n      xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n  \n      // Listen for progress events\n      xhr.upload.onprogress = function(event) {\n        if (event.lengthComputable) {\n          let percentComplete = (event.loaded / event.total) * 100;\n          let roundedPercentComplete = Math.round(percentComplete);\n          console.log(`Upload progress: ${roundedPercentComplete}%`);\n          onProgress(roundedPercentComplete); // Call the onProgress callback with the progress percentage\n        }\n      };\n  \n      // Handle the response\n      xhr.onload = function() {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          // Parse the JSON response\n          const response = JSON.parse(xhr.responseText);\n          resolve(response);\n        } else {\n          reject(new Error('Upload failed with status: ' + xhr.status));\n        }\n      };\n  \n      // Handle network errors\n      xhr.onerror = function() {\n        reject(new Error('Network error occurred during upload'));\n      };\n  \n      // Send the request with the file data directly\n      xhr.send(file);\n    });\n  }\n  \n  const handleFileChangeProgress = useCallback(async (files) => {\n    // const files = event.target.files;\n    if (files.length === 0) {\n      console.error('No files selected');\n      return;\n    }\n\n    setUploadProgress([]); // Reset upload progress state\n\n    // Assume accessToken is retrieved from your app's configuration or installation parameters\n    const accessToken = CMA_token\n    const spaceId = sdk.ids.space; // SDK should provide space ID\n    const environmentId = sdk.ids.environment; // SDK should provide environment ID\n\n    //console.log(\"accessToken: \", accessToken)\n    console.log(\"spaceId: \", spaceId)\n    console.log(\"environmentId: \", environmentId)\n\n    // return;\n\n    Array.from(files).map(async (file, index) => {\n\n      // Initialize progress for this file\n      // setUploadProgress(prev => [...prev, { name: file.name, progress: 0, status: \"uploading\" }]);\n\n      // setUploadProgress(prev => [...prev, {\n      //   name: file.name,\n      //   progress: 0,\n      //   status: \"uploading\",\n      //   assetCreated: false,\n      //   assetProcessed: false,\n      //   assetPublished: false,\n      //   entryPublished: false,\n      //   transcodingStarted: false\n      // }]); \n      \n      setUploadProgress(prev => [...prev, {\n        name: file.name,\n        progress: 0,\n        status: \"uploading\",\n        processingStatus: 'uploading media', // 'Asset Created', 'Asset Processed', 'Asset Published', 'Entry Published', 'Transcoding Started'\n        processingFinished: false\n      }]);       \n\n      try {\n        // Step 1: Create Upload\n\n        // Replace the following with a method that supports progress tracking\n        // and uses the access token for authorization\n        // const upload = await customUploadMethod(file, accessToken, spaceId, environmentId);        \n\n        // Use customUploadMethod with progress callback\n        const upload = await customUploadMethod(file, accessToken, spaceId, environmentId, (progress) => {\n          // Update progress state for this file\n          setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, progress } : item));\n        });        \n\n        console.log(\"upload: \", upload);\n\n        // After successful upload, update status to \"completed\"\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, status: \"completed\" } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, processingStatus: \"upload completed\" } : item));\n\n        //return;\n\n        const uploadId = upload.sys.id;\n        console.log(\"uploadId: \", uploadId);\n\n        // Step 2: Create an Asset linking to the Upload\n        const assetProps = {\n          fields: {\n            title: {\n              'en-US': file.name,\n            },\n            file: {\n              'en-US': {\n                fileName: file.name,\n                contentType: file.type,\n                uploadFrom: {\n                  sys: {\n                    type: \"Link\",\n                    linkType: \"Upload\",\n                    id: uploadId,\n                  },\n                },\n              },\n            },\n          },\n        };\n\n        const asset = await sdk.cma.asset.create({}, assetProps);\n        console.log(\"Asset created: \", asset);\n\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, assetCreated: true } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, processingStatus: \"asset created\" } : item));\n\n\n        // Step 3: Process the asset for a specific locale\n        const processedAsset = await sdk.cma.asset.processForLocale({}, asset, 'en-US');\n        console.log(\"processedAsset: \", processedAsset);\n\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, assetProcessed: true } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, processingStatus: \"asset processed\" } : item));\n\n\n        // Step 4: Publish the processed asset\n        const publishedAsset = await sdk.cma.asset.publish({\n          assetId: processedAsset.sys.id,\n        }, {\n          sys: processedAsset.sys,\n          assetProps: assetProps\n        });        \n        console.log(\"Asset published: \", publishedAsset);\n\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, assetPublished: true } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, processingStatus: \"asset published\" } : item));\n\n\n        // create and publish entry, transcoding starts there\n        const publishedEntry = await createAndPublishEntry(publishedAsset);\n\n        console.log('Published Entry:', publishedEntry);\n\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, entryPublished: true } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, processingStatus: \"entry published\" } : item));\n\n\n        // start transcoding after asset is published\n        const videoSrc = publishedAsset.fields.file[\"en-US\"].url;\n        startTranscodingForTemplates(publishedEntry, videoSrc)\n\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, transcodingStarted: true } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, processingStatus: \"transcoding started\" } : item));\n\n\n      } catch (error) {\n        console.error(`Failed to upload and publish asset: ${file.name}`, error);\n\n        // On error, update status to \"failed\"\n        // setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, status: \"failed\" } : item));\n        setUploadProgress(prev => prev.map((item, idx) => idx === index ? { ...item, status: \"failed\", processingStatus: \"failed\" } : item)); \n               \n\n        return null; // Return null in case of error\n      }\n    });\n  }, [sdk.cma.asset, sdk.ids, createAndPublishEntry, CMA_token, startTranscodingForTemplates]);    \n\n\n  // Wrap the fetch function with useCallback to memoize it\n  const fetchContentTypeFields = useCallback(async () => {\n    try {\n      // Replace 'yourContentTypeId' with your actual content type ID\n      const contentTypeId = CONTENT_TYPE_ID;\n      const contentType = await sdk.cma.contentType.get({contentTypeId});\n\n      console.log('Fields for content type:', contentType.fields);\n    } catch (error) {\n      console.error('Error fetching content type fields:', error);\n    }\n  }, [sdk]); // Add sdk as a dependency\n\n  // Use useEffect to call the fetch function on component mount\n  useEffect(() => {\n    fetchContentTypeFields();\n  }, [fetchContentTypeFields]);\n \n\n  return (\n    <div>\n      {/* <input type=\"file\" multiple onChange={handleFileChangeProgress} /> */}\n\n      <Flex flexDirection='column' padding='spacingL'>\n        <Heading>Multiple media upload</Heading>\n        <Paragraph>\n          Here you can upload multiple media assets. Content for Qencode app will be created based on those media assets \n          and transcoding will be initiated based on selected Transcoding Templates\n        </Paragraph>\n\n        <Form>\n          <FormControl>\n            {/* <TextInput type=\"file\" multiple onChange={handleFileChangeProgress} />  */}\n            <DragAndDropUpload onFilesAdded={handleFileChangeProgress} />\n          </FormControl>\n        </Form>   \n\n        <Flex flexDirection=\"row\" gap=\"spacingS\" flexWrap=\"wrap\">\n          {uploadProgress.map(file => (\n              <Card key={file.name} style={{ marginBottom: '20px', width: \"250px\", minWdth: \"250px\" }}>\n                  <div\n                    style={{\n                      overflow: \"hidden\",\n                      textOverflow: \"ellipsis\",\n                      whiteSpace: \"nowrap\"\n                    }}    \n                  >\n                    <strong>{file.name}</strong>\n                  </div> \n                  {/* <div>Progress: {file.progress}%</div> */}\n                  <ProgressBar progress={file.progress} />\n                  {/* <div>File upload: {file.status}</div> */}\n\n                  <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                    <Text marginRight=\"spacingXs\">Status: {file.processingStatus}</Text>\n                    {\n                      (file.processingStatus !== \"transcoding started\") && (file.processingStatus !== \"failed\") &&\n                      <Spinner size=\"small\" />\n                    }\n                    { file.processingStatus === \"transcoding started\" && <DoneIcon />}               \n                  </Flex> \n              </Card>\n          ))}         \n        </Flex >\n\n      </Flex>\n\n\n      {/* <div>\n          {uploadProgress.map(file => (\n              <div key={file.name} style={{ marginBottom: '20px' }}>\n                  <div><strong>{file.name}</strong></div>\n                  <div>Progress: {file.progress}%</div>\n                  <div>Status: {file.status}</div>\n                  <div>Asset Created: {file.assetCreated ? 'Yes' : 'No'}</div>\n                  <div>Asset Processed: {file.assetProcessed ? 'Yes' : 'No'}</div>\n                  <div>Asset Published: {file.assetPublished ? 'Yes' : 'No'}</div>\n                  <div>Entry Published: {file.entryPublished ? 'Yes' : 'No'}</div>\n                  <div>Transcoding Started: {file.transcodingStarted ? 'Yes' : 'No'}</div>\n              </div>\n          ))}\n      </div> */}\n      \n\n      {/* <div>\n          {uploadProgress.map(file => (\n              <div key={file.name}>\n                  <div>{file.name}</div>\n                  <div>Progress: {file.progress}%</div>\n                  <div>Status: {file.status}</div>\n              </div>\n          ))}\n      </div> */}\n\n    </div>\n  );\n};\n\nexport default Page;\n\n\n// import React from 'react';\n// import { Paragraph } from '@contentful/f36-components';\n// import { /* useCMA, */ useSDK } from '@contentful/react-apps-toolkit';\n\n// const Page = () => {\n//   const sdk = useSDK();\n//   /*\n//      To use the cma, inject it as follows.\n//      If it is not needed, you can remove the next line.\n//   */\n//   // const cma = useCMA();\n\n//   return <Paragraph>Hello Page Component (AppId: {sdk.ids.app})</Paragraph>;\n// };\n\n// export default Page;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}