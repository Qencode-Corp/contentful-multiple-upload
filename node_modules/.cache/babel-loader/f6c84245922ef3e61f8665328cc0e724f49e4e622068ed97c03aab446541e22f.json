{"ast":null,"code":"import b, { forwardRef, useState, useCallback } from 'react';\nimport { cx, css } from 'emotion';\nimport { Box, Flex, getEntityStatusStyles } from '@contentful/f36-core';\nimport { EntityStatusBadge } from '@contentful/f36-badge';\nimport { Asset } from '@contentful/f36-asset';\nimport { Skeleton } from '@contentful/f36-skeleton';\nimport { DragHandle } from '@contentful/f36-drag-handle';\nimport n from '@contentful/f36-tokens';\nimport { Heading, Text, Subheading, Paragraph } from '@contentful/f36-typography';\nimport { IconButton } from '@contentful/f36-button';\nimport { MoreHorizontalIcon } from '@contentful/f36-icons';\nimport { Menu } from '@contentful/f36-menu';\nimport Pr from 'truncate';\nimport { Tooltip } from '@contentful/f36-tooltip';\nvar Or = Object.defineProperty,\n  jr = Object.defineProperties;\nvar Yr = Object.getOwnPropertyDescriptors;\nvar $ = Object.getOwnPropertySymbols;\nvar dr = Object.prototype.hasOwnProperty,\n  pr = Object.prototype.propertyIsEnumerable;\nvar ir = (r, e, t) => e in r ? Or(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : r[e] = t,\n  p = (r, e) => {\n    for (var t in e || (e = {})) dr.call(e, t) && ir(r, t, e[t]);\n    if ($) for (var t of $(e)) pr.call(e, t) && ir(r, t, e[t]);\n    return r;\n  },\n  c = (r, e) => jr(r, Yr(e));\nvar x = (r, e) => {\n  var t = {};\n  for (var o in r) dr.call(r, o) && e.indexOf(o) < 0 && (t[o] = r[o]);\n  if (r != null && $) for (var o of $(r)) e.indexOf(o) < 0 && pr.call(r, o) && (t[o] = r[o]);\n  return t;\n};\nvar lr = () => ({\n  contentBody: css({\n    gridColumn: \"content\",\n    gridRow: \"content\",\n    whiteSpace: \"initial\"\n  }),\n  wrapper: css({\n    flex: \"1 1 0\",\n    display: \"grid\",\n    gridTemplateRows: \"[header] auto [content] minmax(0, 1fr)\",\n    gridTemplateColumns: \"auto [content] minmax(0, 1fr)\"\n  }),\n  dragHandle: css({\n    borderBottomLeftRadius: n.borderRadiusMedium,\n    borderTopLeftRadius: n.borderRadiusMedium,\n    cursor: \"grab\"\n  }),\n  root: ({\n    hasHeader: r,\n    isHovered: e,\n    isSelected: t\n  }) => {\n    let o = {\n      backgroundColor: n.colorWhite,\n      borderColor: n.gray300,\n      borderRadius: n.borderRadiusMedium,\n      borderStyle: \"solid\",\n      borderWidth: 1,\n      color: n.gray900,\n      display: \"flex\",\n      textAlign: \"left\",\n      width: \"100%\",\n      fontSize: n.fontSizeM,\n      fontWeight: n.fontWeightNormal,\n      position: \"relative\",\n      textDecoration: \"none\",\n      margin: 0,\n      transition: `border-color ${n.transitionDurationDefault} ${n.transitionEasingDefault},\n    box-shadow ${n.transitionDurationShort} ${n.transitionEasingDefault}`,\n      \"&:focus\": css({\n        borderColor: t ? n.blue100 : n.blue500,\n        boxShadow: n.glowPrimary,\n        outline: \"none\"\n      }),\n      \"&:focus:not(:focus-visible)\": css({\n        borderColor: t ? n.blue500 : n.gray300,\n        boxShadow: \"unset\"\n      }),\n      \"&:focus-visible\": css({\n        borderColor: n.blue500,\n        boxShadow: n.glowPrimary\n      })\n    };\n    return r || (o.paddingTop = n.spacingM), e && (o.borderColor = n.blue500, o.cursor = \"pointer\"), t && (o.backgroundColor = n.blue100, o.borderColor = n.blue500), css(o);\n  },\n  skeleton: css({\n    border: `1px solid ${n.gray300}`,\n    borderRadius: n.borderRadiusMedium,\n    padding: n.spacingM\n  })\n});\nvar mr = () => ({\n  root: css({\n    minHeight: \"auto\",\n    padding: n.spacing2Xs\n  })\n});\nvar k = ({\n  buttonProps: r,\n  children: e\n}) => {\n  let t = mr();\n  return b.createElement(Menu, null, b.createElement(Menu.Trigger, null, b.createElement(IconButton, c(p({\n    \"aria-label\": \"Actions\",\n    icon: b.createElement(MoreHorizontalIcon, null)\n  }, r), {\n    className: cx(t.root, r == null ? void 0 : r.className),\n    size: \"small\",\n    variant: \"transparent\",\n    testId: \"cf-ui-card-actions\"\n  }))), b.createElement(Menu.List, null, e));\n};\nvar ee = () => ({\n    header: css({\n      columnGap: n.spacingXs,\n      rowGap: n.spacing2Xs,\n      alignItems: \"center\",\n      borderBottomColor: n.gray200,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n      borderTopLeftRadius: n.borderRadiusMedium,\n      borderTopRightRadius: n.borderRadiusMedium,\n      boxSizing: \"border-box\",\n      color: n.gray600,\n      fontSize: n.fontSizeM,\n      fontWeight: n.fontWeightNormal,\n      gridColumn: \"content\",\n      gridRow: \"header\",\n      lineHeight: n.lineHeightM,\n      paddingBottom: n.spacingXs,\n      paddingLeft: n.spacingM,\n      paddingRight: n.spacingXs,\n      paddingTop: n.spacingXs,\n      minHeight: \"37px\"\n    }),\n    headerWithActions: css({\n      paddingBottom: n.spacing2Xs,\n      paddingRight: n.spacingXs,\n      paddingTop: n.spacing2Xs\n    })\n  }),\n  Y = r => {\n    r.preventDefault(), r.stopPropagation();\n  },\n  X = r => {\n    let {\n        icon: e,\n        type: t,\n        actions: o,\n        actionsButtonProps: a,\n        badge: l\n      } = r,\n      m = ee();\n    return b.createElement(Flex, {\n      flexWrap: \"wrap\",\n      className: cx(m.header, o && m.headerWithActions)\n    }, b.createElement(Flex, {\n      flexGrow: 1\n    }, t && b.createElement(Text, {\n      fontColor: \"gray600\",\n      isWordBreak: !0\n    }, t)), e && b.createElement(Flex, {\n      alignItems: \"center\"\n    }, e), l && b.createElement(Flex, {\n      alignItems: \"center\"\n    }, l), o && o.length > 0 && b.createElement(Flex, {\n      onClick: Y,\n      alignItems: \"center\"\n    }, b.createElement(k, {\n      buttonProps: a\n    }, o)));\n  };\nX.displayName = \"DefaultCardHeader\";\nvar ie = \"article\";\nfunction cr(Te, kr) {\n  var or = Te,\n    {\n      actions: r,\n      actionsButtonProps: e,\n      ariaLabel: t,\n      badge: o,\n      children: a,\n      className: l,\n      contentBodyProps: m,\n      header: f,\n      href: y,\n      icon: C,\n      isDragging: s = !1,\n      isHovered: d,\n      isSelected: B = !1,\n      onBlur: H,\n      onClick: E,\n      onFocus: h,\n      onKeyDown: A,\n      onMouseEnter: P,\n      onMouseLeave: M,\n      target: O,\n      rel: _r,\n      testId: wr = \"cf-ui-base-card\",\n      title: Q,\n      type: Z,\n      withDragHandle: rr,\n      dragHandleRender: er,\n      isLoading: Rr\n    } = or,\n    tr = x(or, [\"actions\", \"actionsButtonProps\", \"ariaLabel\", \"badge\", \"children\", \"className\", \"contentBodyProps\", \"header\", \"href\", \"icon\", \"isDragging\", \"isHovered\", \"isSelected\", \"onBlur\", \"onClick\", \"onFocus\", \"onKeyDown\", \"onMouseEnter\", \"onMouseLeave\", \"target\", \"rel\", \"testId\", \"title\", \"type\", \"withDragHandle\", \"dragHandleRender\", \"isLoading\"]);\n  let F = lr(),\n    [vr, nr] = useState(d != null ? d : !1),\n    ar = !!(E || y || rr),\n    Fr = !!f,\n    Nr = Z || C || o || r ? b.createElement(X, {\n      type: Z,\n      icon: C,\n      badge: o,\n      actions: r,\n      actionsButtonProps: e\n    }) : null,\n    Wr = useCallback(u => {\n      h && h(u);\n    }, [h]),\n    Xr = useCallback(u => {\n      H && H(u);\n    }, [H]),\n    Gr = useCallback(u => {\n      nr(!0), P && P(u);\n    }, [P]),\n    Ur = useCallback(u => {\n      nr(!1), M && M(u);\n    }, [M]),\n    $r = E ? u => {\n      E(u);\n    } : void 0,\n    zr = useCallback(u => {\n      A && A(u);\n    }, [A]);\n  if (Rr) return b.createElement(Skeleton.Container, {\n    className: F.skeleton,\n    svgHeight: \"5.6rem\"\n  }, b.createElement(Skeleton.DisplayText, {\n    numberOfLines: 1\n  }), b.createElement(Skeleton.BodyText, {\n    numberOfLines: 1,\n    offsetTop: 35\n  }));\n  let sr = b.createElement(DragHandle, {\n    className: F.dragHandle,\n    isActive: s,\n    label: \"Reorder entry\",\n    onClick: Y\n  });\n  return b.createElement(Box, c(p({\n    \"aria-label\": Q || t,\n    \"aria-pressed\": tr.as === \"button\" ? B ? \"true\" : \"false\" : void 0,\n    as: ie,\n    className: cx(F.root({\n      hasHeader: Fr,\n      isHovered: vr,\n      isSelected: B\n    }), l),\n    href: y,\n    onBlur: Xr,\n    onClick: $r,\n    onFocus: Wr,\n    onMouseEnter: typeof d == \"undefined\" && ar ? Gr : void 0,\n    onMouseLeave: typeof d == \"undefined\" && ar ? Ur : void 0,\n    onKeyDown: zr,\n    rel: y && (_r || \"noreferrer\"),\n    role: E && !y ? \"button\" : void 0,\n    tabIndex: E ? 0 : void 0,\n    target: O\n  }, tr), {\n    ref: kr,\n    testId: wr,\n    title: Q\n  }), rr ? er ? er({\n    drag: sr,\n    isDragging: s\n  }) : sr : null, b.createElement(\"div\", {\n    className: F.wrapper,\n    \"data-card-part\": \"wrapper\"\n  }, f != null ? f : Nr, b.createElement(\"div\", {\n    className: F.contentBody,\n    \"data-card-part\": \"content\"\n  }, a)));\n}\ncr.displayName = \"BaseCard\";\nvar S = forwardRef(cr);\nvar gr = () => ({\n  root: ({\n    size: r\n  }) => css({\n    display: \"inline-flex\",\n    width: \"auto\",\n    borderRadius: n.borderRadiusMedium,\n    minWidth: `calc(1rem * (120 / ${n.fontBaseDefault}))`,\n    height: r === \"small\" ? `calc(1rem * (188 / ${n.fontBaseDefault}))` : `calc(1rem * (300 / ${n.fontBaseDefault}))`,\n    padding: 0,\n    textAlign: \"center\"\n  }),\n  asset: css({\n    height: \"100%\"\n  }),\n  skeleton: css({\n    border: `1px solid ${n.gray300}`,\n    borderRadius: n.borderRadiusMedium,\n    padding: n.spacingM\n  })\n});\nvar ur = H => {\n  var E = H,\n    {\n      actions: r,\n      className: e,\n      icon: t = null,\n      isSelected: o,\n      size: a = \"default\",\n      src: l,\n      status: m,\n      title: f,\n      type: y,\n      withDragHandle: C = !1,\n      isLoading: s,\n      testId: d = \"cf-ui-asset-card\"\n    } = E,\n    B = x(E, [\"actions\", \"className\", \"icon\", \"isSelected\", \"size\", \"src\", \"status\", \"title\", \"type\", \"withDragHandle\", \"isLoading\", \"testId\"]);\n  let h = gr(),\n    A = m ? b.createElement(EntityStatusBadge, {\n      entityStatus: m\n    }) : null,\n    P = t || A || r ? b.createElement(X, {\n      icon: t,\n      badge: A,\n      actions: r\n    }) : null;\n  return s ? b.createElement(Skeleton.Container, {\n    className: h.skeleton,\n    svgWidth: a === \"default\" ? \"18rem\" : \"11rem\",\n    svgHeight: a === \"default\" ? \"18.75rem\" : \"12rem\"\n  }, b.createElement(Skeleton.Image, {\n    width: \"100%\",\n    height: \"18.75rem\"\n  })) : b.createElement(S, c(p({}, B), {\n    badge: A,\n    className: cx(h.root({\n      size: a\n    }), e),\n    header: P,\n    isSelected: o,\n    title: f,\n    withDragHandle: C,\n    testId: d\n  }), b.createElement(Flex, {\n    alignItems: \"center\",\n    fullHeight: !0,\n    justifyContent: \"center\"\n  }, b.createElement(Asset, {\n    className: h.asset,\n    src: l,\n    status: m,\n    title: f,\n    type: y\n  })));\n};\nvar fe = r => {\n    switch (r) {\n      case \"large\":\n        return n.spacingL;\n      case \"none\":\n        return 0;\n      default:\n        return n.spacingM;\n    }\n  },\n  Er = ({\n    padding: r\n  }) => ({\n    header: css({\n      gridColumn: \"content\",\n      gridRow: \"header\",\n      marginBottom: n.spacingM\n    }),\n    root: css({\n      padding: fe(r)\n    })\n  });\nfunction hr(C, y) {\n  var s = C,\n    {\n      actions: r,\n      badge: e,\n      icon: t,\n      padding: o = \"default\",\n      title: a,\n      className: l,\n      testId: m = \"cf-ui-card\"\n    } = s,\n    f = x(s, [\"actions\", \"badge\", \"icon\", \"padding\", \"title\", \"className\", \"testId\"]);\n  let d = Er({\n      padding: o\n    }),\n    B = !!(a || t || e || r);\n  return b.createElement(S, c(p({\n    className: cx(d.root, l)\n  }, f), {\n    testId: m,\n    header: B && b.createElement(Flex, {\n      alignItems: \"center\",\n      className: cx(d.header)\n    }, a && b.createElement(Flex, {\n      as: \"header\",\n      flexGrow: 1\n    }, b.createElement(Heading, {\n      marginBottom: \"none\"\n    }, a)), t && b.createElement(Flex, {\n      alignItems: \"center\",\n      marginLeft: \"spacingXs\"\n    }, t), e && b.createElement(Flex, {\n      alignItems: \"center\",\n      marginLeft: \"spacingXs\"\n    }, e), r && b.createElement(k, null, r)),\n    ref: y\n  }));\n}\nhr.displayName = \"Card\";\nvar br = forwardRef(hr);\nvar Br = () => ({\n  actionsButton: css({\n    borderBottomLeftRadius: 0,\n    borderBottomRightRadius: 0,\n    borderTopLeftRadius: 0,\n    borderTopRightRadius: n.borderRadiusMedium\n  }),\n  content: r => css({\n    gridColumn: \"content\",\n    marginTop: r === \"small\" ? n.spacingXs : n.spacingS,\n    marginBottom: r === \"small\" ? `calc(-1 * ${n.spacingXs})` : 0\n  }),\n  root: css({\n    padding: 0,\n    '[data-card-part=\"content\"]': {\n      paddingBottom: n.spacingM,\n      paddingLeft: n.spacingM,\n      paddingRight: n.spacingM\n    }\n  }),\n  header: css({\n    borderBottomWidth: 1,\n    borderBottomColor: n.gray200,\n    borderBottomStyle: \"solid\",\n    minHeight: \"auto\",\n    paddingBottom: n.spacingXs,\n    paddingLeft: n.spacingM,\n    paddingRight: n.spacingXs\n  }),\n  thumbnail: r => css(p({\n    margin: `0 0 0 ${n.spacingS}`,\n    padding: 0,\n    overflow: \"hidden\",\n    position: \"relative\",\n    img: {\n      width: \"100%\",\n      height: \"100%\",\n      objectFit: \"cover\",\n      position: \"absolute\",\n      zIndex: 1\n    }\n  }, r === \"small\" ? {\n    height: \"40px\",\n    width: \"40px\"\n  } : {\n    height: \"70px\",\n    width: \"70px\"\n  }))\n});\nvar he = \"article\";\nfunction Tr({\n  title: r,\n  titleTag: e\n}) {\n  if (!r) return null;\n  let t = Pr(r, 255, {});\n  return b.createElement(Subheading, {\n    title: r.length > 255 ? r : \"\",\n    testId: \"title\",\n    as: e,\n    marginBottom: \"none\",\n    isWordBreak: !0\n  }, t);\n}\nTr.displayName = \"EntryCardTitle\";\nfunction Ir({\n  description: r,\n  size: e\n}) {\n  if (!r || e === \"small\") return null;\n  let t = Pr(r, 95, {});\n  return b.createElement(Paragraph, {\n    marginBottom: \"none\",\n    isWordBreak: !0\n  }, t);\n}\nIr.displayName = \"EntryCardDescription\";\nfunction Sr(A, h) {\n  var P = A,\n    {\n      actions: r,\n      children: e,\n      className: t,\n      src: o,\n      status: a,\n      thumbnailElement: l,\n      description: m,\n      withDragHandle: f = !1,\n      title: y,\n      titleTag: C = \"h2\",\n      size: s,\n      testId: d = \"cf-ui-entry-card\",\n      contentType: B,\n      badge: H\n    } = P,\n    E = x(P, [\"actions\", \"children\", \"className\", \"src\", \"status\", \"thumbnailElement\", \"description\", \"withDragHandle\", \"title\", \"titleTag\", \"size\", \"testId\", \"contentType\", \"badge\"]);\n  let M = Br(),\n    O = a ? b.createElement(EntityStatusBadge, {\n      entityStatus: a\n    }) : null;\n  return b.createElement(S, c(p({\n    as: he\n  }, E), {\n    actions: r,\n    badge: H || O,\n    className: cx(M.root, t),\n    withDragHandle: f,\n    ref: h,\n    type: B,\n    testId: d\n  }), b.createElement(Flex, {\n    alignItems: \"center\",\n    className: M.content(s),\n    flexDirection: \"row\"\n  }, b.createElement(Flex, {\n    flexDirection: \"column\",\n    flexGrow: 1,\n    gap: \"spacingS\"\n  }, b.createElement(Tr, {\n    title: y,\n    titleTag: C\n  }), b.createElement(Ir, {\n    size: s,\n    description: m\n  }), e), l && s !== \"small\" && b.createElement(\"figure\", {\n    className: M.thumbnail(s)\n  }, l)));\n}\nSr.displayName = \"EntryCard\";\nvar Dr = forwardRef(Sr);\nvar Hr = () => ({\n  actions: css({\n    display: \"flex\",\n    padding: 0,\n    marginLeft: n.spacingXs,\n    minHeight: \"auto\"\n  }),\n  root: ({\n    status: r\n  }) => {\n    let e = getEntityStatusStyles({\n      status: r\n    });\n    return css({\n      borderBottomLeftRadius: 0,\n      borderTopLeftRadius: 0,\n      display: \"inline-flex\",\n      width: \"auto\",\n      verticalAlign: \"middle\",\n      paddingBottom: 0,\n      paddingTop: 0,\n      paddingLeft: n.spacingS,\n      paddingRight: n.spacing2Xs,\n      '[data-card-part=\"wrapper\"]': {\n        display: \"inline-flex\",\n        flexDirection: \"row-reverse\"\n      },\n      \"&::before\": {\n        backgroundColor: e.color,\n        bottom: 0,\n        content: '\"\"',\n        display: \"block\",\n        left: 0,\n        position: \"absolute\",\n        top: 0,\n        width: n.spacing2Xs\n      }\n    });\n  },\n  skeleton: css({\n    display: \"inline-flex\",\n    border: `1px solid ${n.gray300}`,\n    borderTopRightRadius: n.borderRadiusMedium,\n    borderBottomRightRadius: n.borderRadiusMedium,\n    padding: n.spacingXs\n  })\n});\nvar Lr = y => {\n  var C = y,\n    {\n      actions: r,\n      className: e,\n      children: t,\n      status: o,\n      title: a,\n      isLoading: l,\n      testId: m = \"cf-ui-inline-entry-card\"\n    } = C,\n    f = x(C, [\"actions\", \"className\", \"children\", \"status\", \"title\", \"isLoading\", \"testId\"]);\n  let s = Hr(),\n    d = b.createElement(k, {\n      buttonProps: {\n        className: s.actions\n      }\n    }, r);\n  return l ? b.createElement(Skeleton.Container, {\n    className: s.skeleton,\n    svgHeight: \"1.25rem\",\n    svgWidth: \"6rem\"\n  }, b.createElement(Skeleton.BodyText, {\n    numberOfLines: 1\n  })) : b.createElement(Tooltip, {\n    placement: \"bottom\",\n    content: a\n  }, b.createElement(S, c(p({}, f), {\n    className: cx(s.root({\n      status: o\n    }), e),\n    header: d,\n    testId: m\n  }), t || b.createElement(Text, null, a)));\n};\nexport { ur as AssetCard, br as Card, Dr as EntryCard, Lr as InlineEntryCard };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":["cx","css"],"sources":["C:\\Users\\Alex\\Desktop\\GITHUB\\QENCODE\\contentful-mult-upload\\node_modules\\@contentful\\f36-card\\src\\AssetCard\\AssetCard.tsx","C:\\Users\\Alex\\Desktop\\GITHUB\\QENCODE\\contentful-mult-upload\\node_modules\\@contentful\\f36-card\\src\\BaseCard\\BaseCard.tsx","C:\\Users\\Alex\\Desktop\\GITHUB\\QENCODE\\contentful-mult-upload\\node_modules\\@contentful\\f36-card\\src\\BaseCard\\BaseCard.styles.ts","C:\\Users\\Alex\\Desktop\\GITHUB\\QENCODE\\contentful-mult-upload\\node_modules\\@contentful\\f36-card\\src\\BaseCard\\DefaultCardHeader.tsx","C:\\Users\\Alex\\Desktop\\GITHUB\\QENCODE\\contentful-mult-upload\\node_modules\\@contentful\\f36-card\\src\\BaseCard\\CardActions.tsx","C:\\Users\\Alex\\Desktop\\GITHUB\\QENCODE\\contentful-mult-upload\\node_modules\\@contentful\\f36-card\\src\\BaseCard\\CardActions.styles.ts","C:\\Users\\Alex\\Desktop\\GITHUB\\QENCODE\\contentful-mult-upload\\node_modules\\@contentful\\f36-card\\src\\AssetCard\\AssetCard.styles.ts","C:\\Users\\Alex\\Desktop\\GITHUB\\QENCODE\\contentful-mult-upload\\node_modules\\@contentful\\f36-card\\src\\Card\\Card.tsx","C:\\Users\\Alex\\Desktop\\GITHUB\\QENCODE\\contentful-mult-upload\\node_modules\\@contentful\\f36-card\\src\\Card\\Card.styles.ts","C:\\Users\\Alex\\Desktop\\GITHUB\\QENCODE\\contentful-mult-upload\\node_modules\\@contentful\\f36-card\\src\\EntryCard\\EntryCard.tsx","C:\\Users\\Alex\\Desktop\\GITHUB\\QENCODE\\contentful-mult-upload\\node_modules\\@contentful\\f36-card\\src\\EntryCard\\EntryCard.styles.ts","C:\\Users\\Alex\\Desktop\\GITHUB\\QENCODE\\contentful-mult-upload\\node_modules\\@contentful\\f36-card\\src\\InlineEntryCard\\InlineEntryCard.tsx","C:\\Users\\Alex\\Desktop\\GITHUB\\QENCODE\\contentful-mult-upload\\node_modules\\@contentful\\f36-card\\src\\InlineEntryCard\\InlineEntryCard.styles.ts"],"sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport { Flex } from '@contentful/f36-core';\nimport { EntityStatusBadge } from '@contentful/f36-badge';\nimport { Asset, type AssetStatus, type AssetType } from '@contentful/f36-asset';\nimport { Skeleton } from '@contentful/f36-skeleton';\n\nimport { BaseCard } from '../BaseCard/BaseCard';\nimport type { BaseCardInternalProps } from '../BaseCard/BaseCard.types';\nimport { getAssetCardStyles } from './AssetCard.styles';\nimport { DefaultCardHeader } from '../BaseCard/DefaultCardHeader';\n\nexport interface AssetCardInternalProps\n  extends Omit<BaseCardInternalProps, 'badge' | 'header' | 'padding' | 'ref'> {\n  size?: 'small' | 'default';\n  src?: string;\n  status?: AssetStatus;\n  /**\n   * Type of the entity represented by the card. Shown in the header of the card\n   */\n  type?: AssetType;\n}\n\nexport type AssetCardProps = AssetCardInternalProps;\n\nexport const AssetCard = ({\n  actions,\n  className,\n  icon = null,\n  isSelected,\n  size = 'default',\n  src,\n  status,\n  title,\n  type,\n  withDragHandle = false,\n  isLoading,\n  testId = 'cf-ui-asset-card',\n  ...otherProps\n}: AssetCardInternalProps) => {\n  const styles = getAssetCardStyles();\n  const badge = status ? <EntityStatusBadge entityStatus={status} /> : null;\n  const header =\n    icon || badge || actions ? (\n      <DefaultCardHeader icon={icon} badge={badge} actions={actions} />\n    ) : null;\n\n  if (isLoading) {\n    return (\n      <Skeleton.Container\n        className={styles.skeleton}\n        svgWidth={size === 'default' ? '18rem' : '11rem'}\n        svgHeight={size === 'default' ? '18.75rem' : '12rem'}\n      >\n        <Skeleton.Image width=\"100%\" height=\"18.75rem\" />\n      </Skeleton.Container>\n    );\n  }\n\n  return (\n    <BaseCard\n      {...otherProps}\n      badge={badge}\n      className={cx(styles.root({ size }), className)}\n      header={header}\n      isSelected={isSelected}\n      title={title}\n      withDragHandle={withDragHandle}\n      testId={testId}\n    >\n      <Flex alignItems=\"center\" fullHeight justifyContent=\"center\">\n        <Asset\n          className={styles.asset}\n          src={src}\n          status={status}\n          title={title}\n          type={type}\n        />\n      </Flex>\n    </BaseCard>\n  );\n};\n","import { cx } from 'emotion';\nimport React, {\n  forwardRef,\n  useCallback,\n  useState,\n  type FocusEventHandler,\n  type KeyboardEventHandler,\n  type MouseEvent,\n  type MouseEventHandler,\n} from 'react';\nimport {\n  Box,\n  type PolymorphicComponent,\n  type PolymorphicProps,\n} from '@contentful/f36-core';\nimport { DragHandle } from '@contentful/f36-drag-handle';\nimport { Skeleton } from '@contentful/f36-skeleton';\n\nimport { getBaseCardStyles } from './BaseCard.styles';\n\nimport { DefaultCardHeader, stopEvents } from './DefaultCardHeader';\nimport type { BaseCardInternalProps } from './BaseCard.types';\n\nexport const BASE_CARD_DEFAULT_TAG = 'article';\n\nexport type BaseCardProps<\n  E extends React.ElementType = typeof BASE_CARD_DEFAULT_TAG,\n> = PolymorphicProps<BaseCardInternalProps, E>;\n\nfunction _BaseCard<E extends React.ElementType = typeof BASE_CARD_DEFAULT_TAG>(\n  {\n    actions,\n    actionsButtonProps,\n    ariaLabel,\n    badge,\n    children,\n    className,\n    contentBodyProps,\n    header,\n    href,\n    icon,\n    isDragging = false,\n    isHovered: isHoveredProp,\n    isSelected = false,\n    onBlur,\n    onClick,\n    onFocus,\n    onKeyDown,\n    onMouseEnter,\n    onMouseLeave,\n    target,\n    rel,\n    testId = 'cf-ui-base-card',\n    title,\n    type,\n    withDragHandle,\n    dragHandleRender,\n    isLoading,\n    ...otherProps\n  }: BaseCardProps<E>,\n  forwardedRef: React.Ref<HTMLElement>,\n) {\n  const styles = getBaseCardStyles();\n  const [isHovered, setIsHovered] = useState(isHoveredProp ?? false);\n  const isInteractive = Boolean(onClick || href || withDragHandle);\n  const hasHeader = Boolean(header);\n  const defaultHeader =\n    type || icon || badge || actions ? (\n      <DefaultCardHeader\n        type={type}\n        icon={icon}\n        badge={badge}\n        actions={actions}\n        actionsButtonProps={actionsButtonProps}\n      />\n    ) : null;\n\n  const handleFocus = useCallback<FocusEventHandler<HTMLElement>>(\n    (event) => {\n      if (onFocus) {\n        onFocus(event);\n      }\n    },\n    [onFocus],\n  );\n\n  const handleBlur = useCallback<FocusEventHandler<HTMLElement>>(\n    (event) => {\n      if (onBlur) {\n        onBlur(event);\n      }\n    },\n    [onBlur],\n  );\n\n  const handleMouseEnter = useCallback<MouseEventHandler<HTMLElement>>(\n    (event) => {\n      setIsHovered(true);\n\n      if (onMouseEnter) {\n        onMouseEnter(event);\n      }\n    },\n    [onMouseEnter],\n  );\n\n  const handleMouseLeave = useCallback<MouseEventHandler<HTMLElement>>(\n    (event) => {\n      setIsHovered(false);\n\n      if (onMouseLeave) {\n        onMouseLeave(event);\n      }\n    },\n    [onMouseLeave],\n  );\n\n  const handleClick = onClick\n    ? (event: MouseEvent<HTMLElement>) => {\n        onClick(event);\n      }\n    : undefined;\n\n  const handleKeyDown = useCallback<KeyboardEventHandler<HTMLElement>>(\n    (event) => {\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n    },\n    [onKeyDown],\n  );\n\n  if (isLoading) {\n    return (\n      <Skeleton.Container className={styles.skeleton} svgHeight=\"5.6rem\">\n        <Skeleton.DisplayText numberOfLines={1} />\n        <Skeleton.BodyText numberOfLines={1} offsetTop={35} />\n      </Skeleton.Container>\n    );\n  }\n\n  const drag = (\n    <DragHandle\n      className={styles.dragHandle}\n      isActive={isDragging}\n      label=\"Reorder entry\"\n      onClick={stopEvents}\n    />\n  );\n\n  return (\n    <Box\n      aria-label={title || ariaLabel}\n      aria-pressed={\n        otherProps.as === 'button' ? (isSelected ? 'true' : 'false') : undefined\n      }\n      as={BASE_CARD_DEFAULT_TAG}\n      className={cx(\n        styles.root({\n          hasHeader,\n          isHovered,\n          isSelected,\n        }),\n        className,\n      )}\n      href={href}\n      onBlur={handleBlur}\n      onClick={handleClick}\n      onFocus={handleFocus}\n      onMouseEnter={\n        typeof isHoveredProp === 'undefined' && isInteractive\n          ? handleMouseEnter\n          : undefined\n      }\n      onMouseLeave={\n        typeof isHoveredProp === 'undefined' && isInteractive\n          ? handleMouseLeave\n          : undefined\n      }\n      onKeyDown={handleKeyDown}\n      rel={href && (rel || 'noreferrer')}\n      role={onClick && !href ? 'button' : undefined}\n      tabIndex={onClick ? 0 : undefined}\n      target={target}\n      {...otherProps}\n      ref={forwardedRef}\n      testId={testId}\n      title={title}\n    >\n      {withDragHandle\n        ? dragHandleRender\n          ? dragHandleRender({ drag, isDragging })\n          : drag\n        : null}\n      <div className={styles.wrapper} data-card-part=\"wrapper\">\n        {header ?? defaultHeader}\n        <div className={styles.contentBody} data-card-part=\"content\">\n          {children}\n        </div>\n      </div>\n    </Box>\n  );\n}\n\n_BaseCard.displayName = 'BaseCard';\n\nexport const BaseCard: PolymorphicComponent<\n  BaseCardInternalProps,\n  typeof BASE_CARD_DEFAULT_TAG\n> = forwardRef(_BaseCard);\n","import { css } from 'emotion';\nimport type { ObjectInterpolation } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getBaseCardStyles = () => {\n  return {\n    contentBody: css({\n      gridColumn: 'content',\n      gridRow: 'content',\n      whiteSpace: 'initial',\n    }),\n    wrapper: css({\n      flex: '1 1 0',\n      display: 'grid',\n      gridTemplateRows: '[header] auto [content] minmax(0, 1fr)',\n      gridTemplateColumns: 'auto [content] minmax(0, 1fr)',\n    }),\n    dragHandle: css({\n      borderBottomLeftRadius: tokens.borderRadiusMedium,\n      borderTopLeftRadius: tokens.borderRadiusMedium,\n      cursor: 'grab',\n    }),\n    root: ({ hasHeader, isHovered, isSelected }) => {\n      const styles: ObjectInterpolation<undefined> = {\n        backgroundColor: tokens.colorWhite,\n        borderColor: tokens.gray300,\n        borderRadius: tokens.borderRadiusMedium,\n        borderStyle: 'solid',\n        borderWidth: 1,\n        color: tokens.gray900,\n        display: 'flex',\n        textAlign: 'left',\n        width: '100%',\n        fontSize: tokens.fontSizeM,\n        fontWeight: tokens.fontWeightNormal,\n        position: 'relative',\n        textDecoration: 'none',\n        margin: 0, // remove the default button margin in Safari.\n        transition: `border-color ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault},\n    box-shadow ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault}`,\n\n        '&:focus': css({\n          borderColor: isSelected ? tokens.blue100 : tokens.blue500,\n          boxShadow: tokens.glowPrimary,\n          outline: 'none',\n        }),\n        '&:focus:not(:focus-visible)': css({\n          borderColor: isSelected ? tokens.blue500 : tokens.gray300,\n          boxShadow: 'unset',\n        }),\n        '&:focus-visible': css({\n          borderColor: tokens.blue500,\n          boxShadow: tokens.glowPrimary,\n        }),\n      };\n\n      if (!hasHeader) {\n        styles.paddingTop = tokens.spacingM;\n      }\n\n      if (isHovered) {\n        styles.borderColor = tokens.blue500;\n        styles.cursor = 'pointer';\n      }\n\n      if (isSelected) {\n        styles.backgroundColor = tokens.blue100;\n        styles.borderColor = tokens.blue500;\n      }\n\n      return css(styles);\n    },\n    skeleton: css({\n      border: `1px solid ${tokens.gray300}`,\n      borderRadius: tokens.borderRadiusMedium,\n      padding: tokens.spacingM,\n    }),\n  };\n};\n","import React from 'react';\nimport { Flex } from '@contentful/f36-core';\nimport { Text } from '@contentful/f36-typography';\nimport { CardActions } from './CardActions';\nimport tokens from '@contentful/f36-tokens';\n\nimport { cx, css } from 'emotion';\n\nimport { BaseCardInternalProps } from './BaseCard.types';\n\nconst getHeaderStyles = () => {\n  return {\n    header: css({\n      columnGap: tokens.spacingXs,\n      rowGap: tokens.spacing2Xs,\n      alignItems: 'center',\n      borderBottomColor: tokens.gray200,\n      borderBottomStyle: 'solid',\n      borderBottomWidth: 1,\n      borderTopLeftRadius: tokens.borderRadiusMedium,\n      borderTopRightRadius: tokens.borderRadiusMedium,\n      boxSizing: 'border-box',\n      color: tokens.gray600,\n      fontSize: tokens.fontSizeM,\n      fontWeight: tokens.fontWeightNormal,\n      gridColumn: 'content',\n      gridRow: 'header',\n      lineHeight: tokens.lineHeightM,\n      paddingBottom: tokens.spacingXs,\n      paddingLeft: tokens.spacingM,\n      paddingRight: tokens.spacingXs,\n      paddingTop: tokens.spacingXs,\n      minHeight: '37px',\n    }),\n    headerWithActions: css({\n      paddingBottom: tokens.spacing2Xs,\n      paddingRight: tokens.spacingXs,\n      paddingTop: tokens.spacing2Xs,\n    }),\n  };\n};\n\nexport const stopEvents = (e: React.MouseEvent<HTMLElement>) => {\n  e.preventDefault();\n  e.stopPropagation();\n};\n\nexport const DefaultCardHeader = (\n  props: Pick<\n    BaseCardInternalProps,\n    'type' | 'icon' | 'badge' | 'actions' | 'actionsButtonProps'\n  >,\n) => {\n  const { icon, type, actions, actionsButtonProps, badge } = props;\n  const styles = getHeaderStyles();\n  return (\n    <Flex\n      flexWrap=\"wrap\"\n      className={cx(styles.header, actions && styles.headerWithActions)}\n    >\n      <Flex flexGrow={1}>\n        {type && (\n          <Text fontColor=\"gray600\" isWordBreak>\n            {type}\n          </Text>\n        )}\n      </Flex>\n      {icon && <Flex alignItems=\"center\">{icon}</Flex>}\n      {badge && <Flex alignItems=\"center\">{badge}</Flex>}\n      {actions && actions.length > 0 && (\n        <Flex\n          // don't propagate click event, so onClick handler on the card is not triggered\n          onClick={stopEvents}\n          alignItems=\"center\"\n        >\n          <CardActions buttonProps={actionsButtonProps}>{actions}</CardActions>\n        </Flex>\n      )}\n    </Flex>\n  );\n};\n\nDefaultCardHeader.displayName = 'DefaultCardHeader';\n","import React from 'react';\nimport { IconButton, type ButtonProps } from '@contentful/f36-button';\nimport { MoreHorizontalIcon } from '@contentful/f36-icons';\nimport { Menu } from '@contentful/f36-menu';\nimport { cx } from 'emotion';\n\nimport { getCardActionsStyles } from './CardActions.styles';\n\nexport type CardActionsProps = {\n  buttonProps?: Partial<Omit<ButtonProps<'button'>, 'ref'>>;\n  /**\n   * Child elements to be rendered in the component\n   */\n  children: React.ReactNodeArray;\n};\n\nexport const CardActions = ({\n  buttonProps,\n  children,\n}: CardActionsProps): React.ReactElement => {\n  const styles = getCardActionsStyles();\n\n  return (\n    <Menu>\n      <Menu.Trigger>\n        <IconButton\n          aria-label=\"Actions\"\n          icon={<MoreHorizontalIcon />}\n          {...buttonProps}\n          className={cx(styles.root, buttonProps?.className)}\n          size=\"small\"\n          variant=\"transparent\"\n          testId=\"cf-ui-card-actions\"\n        />\n      </Menu.Trigger>\n      <Menu.List>{children}</Menu.List>\n    </Menu>\n  );\n};\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getCardActionsStyles = () => {\n  return {\n    root: css({\n      minHeight: 'auto',\n      padding: tokens.spacing2Xs,\n    }),\n  };\n};\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport const getAssetCardStyles = () => {\n  return {\n    root: ({ size }) =>\n      css({\n        display: 'inline-flex',\n        width: 'auto',\n        borderRadius: tokens.borderRadiusMedium,\n        minWidth: `calc(1rem * (120 / ${tokens.fontBaseDefault}))`,\n        height:\n          size === 'small'\n            ? `calc(1rem * (188 / ${tokens.fontBaseDefault}))`\n            : `calc(1rem * (300 / ${tokens.fontBaseDefault}))`,\n        padding: 0,\n        textAlign: 'center',\n      }),\n    asset: css({\n      height: '100%',\n    }),\n    skeleton: css({\n      border: `1px solid ${tokens.gray300}`,\n      borderRadius: tokens.borderRadiusMedium,\n      padding: tokens.spacingM,\n    }),\n  };\n};\n","import React, { forwardRef } from 'react';\nimport { cx } from 'emotion';\nimport {\n  Flex,\n  type PolymorphicComponent,\n  type PolymorphicProps,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { Heading } from '@contentful/f36-typography';\n\nimport { BaseCard, BASE_CARD_DEFAULT_TAG } from '../BaseCard/BaseCard';\nimport type { BaseCardInternalProps } from '../BaseCard/BaseCard.types';\nimport { CardActions } from '../BaseCard/CardActions';\nimport { getCardStyles } from './Card.styles';\n\ntype BaseProps = Omit<\n  BaseCardInternalProps,\n  'header' | 'withDragHandle' | 'ref' | 'src' | 'type'\n> & {\n  /**\n   * Padding size to apply to the component\n   *\n   * @default default\n   */\n  padding?: 'default' | 'large' | 'none';\n};\n\ntype BasePropsWithDragHandle = Omit<BaseProps, 'padding'> &\n  Pick<BaseCardInternalProps, 'withDragHandle'> & { padding: 'none' };\n\nexport type CardInternalProps = BaseProps | BasePropsWithDragHandle;\n\nexport type CardProps<\n  E extends React.ElementType = typeof BASE_CARD_DEFAULT_TAG,\n> = PolymorphicProps<CardInternalProps, E>;\n\nfunction _Card<E extends React.ElementType = typeof BASE_CARD_DEFAULT_TAG>(\n  {\n    actions,\n    badge,\n    icon,\n    padding = 'default',\n    title,\n    className,\n    testId = 'cf-ui-card',\n    ...otherProps\n  }: CardProps<E>,\n  forwardedRef: React.Ref<HTMLElement>,\n) {\n  const styles = getCardStyles({ padding });\n  const hasHeader = Boolean(title || icon || badge || actions);\n\n  return (\n    <BaseCard\n      className={cx(styles.root, className)}\n      {...otherProps}\n      testId={testId}\n      header={\n        hasHeader && (\n          <Flex alignItems=\"center\" className={cx(styles.header)}>\n            {title && (\n              <Flex as=\"header\" flexGrow={1}>\n                <Heading marginBottom=\"none\">{title}</Heading>\n              </Flex>\n            )}\n            {icon && (\n              <Flex alignItems=\"center\" marginLeft=\"spacingXs\">\n                {icon}\n              </Flex>\n            )}\n            {badge && (\n              <Flex alignItems=\"center\" marginLeft=\"spacingXs\">\n                {badge}\n              </Flex>\n            )}\n            {actions && <CardActions>{actions}</CardActions>}\n          </Flex>\n        )\n      }\n      ref={forwardedRef}\n    />\n  );\n}\n\n_Card.displayName = 'Card';\n\nexport const Card: PolymorphicComponent<\n  ExpandProps<CardInternalProps>,\n  typeof BASE_CARD_DEFAULT_TAG\n> = forwardRef(_Card);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { CardProps } from '..';\n\nconst getCardPaddingValue = (padding: CardProps['padding']) => {\n  switch (padding) {\n    case 'large':\n      return tokens.spacingL;\n    case 'none':\n      return 0;\n    default:\n      return tokens.spacingM;\n  }\n};\n\nexport const getCardStyles = ({ padding }) => ({\n  header: css({\n    gridColumn: 'content',\n    gridRow: 'header',\n    marginBottom: tokens.spacingM,\n  }),\n  root: css({\n    padding: getCardPaddingValue(padding),\n  }),\n});\n","import React, { forwardRef } from 'react';\nimport truncate from 'truncate';\nimport { cx } from 'emotion';\nimport {\n  Flex,\n  type ExpandProps,\n  type PolymorphicComponent,\n  type PolymorphicProps,\n} from '@contentful/f36-core';\nimport { EntityStatusBadge } from '@contentful/f36-badge';\nimport {\n  Subheading,\n  Paragraph,\n  type HeadingElement,\n} from '@contentful/f36-typography';\n\nimport { BaseCard } from '../BaseCard/BaseCard';\nimport { getEntryCardStyles } from './EntryCard.styles';\nimport { EntryCardInternalProps, EntryCardSize } from './EntryCard.types';\n\nconst ENTRY_CARD_DEFAULT_TAG = 'article';\n\nexport type EntryCardProps<\n  E extends React.ElementType = typeof ENTRY_CARD_DEFAULT_TAG,\n> = PolymorphicProps<EntryCardInternalProps, E>;\n\nfunction EntryCardTitle({\n  title,\n  titleTag,\n}: {\n  title?: string;\n  titleTag: HeadingElement;\n}) {\n  if (!title) {\n    return null;\n  }\n\n  const truncatedTitle = truncate(title, 255, {});\n\n  return (\n    <Subheading\n      title={title.length > 255 ? title : ''}\n      testId=\"title\"\n      as={titleTag}\n      marginBottom=\"none\"\n      isWordBreak\n    >\n      {truncatedTitle}\n    </Subheading>\n  );\n}\n\nEntryCardTitle.displayName = 'EntryCardTitle';\n\nfunction EntryCardDescription({\n  description,\n  size,\n}: {\n  size: EntryCardSize;\n  description?: string;\n}) {\n  if (!description || size === 'small') {\n    return null;\n  }\n\n  const truncatedDescription = truncate(description, 95, {});\n\n  return (\n    <Paragraph marginBottom=\"none\" isWordBreak>\n      {truncatedDescription}\n    </Paragraph>\n  );\n}\n\nEntryCardDescription.displayName = 'EntryCardDescription';\n\nfunction _EntryCard<\n  E extends React.ElementType = typeof ENTRY_CARD_DEFAULT_TAG,\n>(\n  {\n    actions,\n    children,\n    className,\n    src,\n    status,\n    thumbnailElement,\n    description,\n    withDragHandle = false,\n    title,\n    titleTag = 'h2',\n    size,\n    testId = 'cf-ui-entry-card',\n    contentType,\n    badge,\n    ...otherProps\n  }: EntryCardProps<E>,\n  forwardedRef: React.Ref<any>,\n) {\n  const styles = getEntryCardStyles();\n  const entryStatusBadge = status ? (\n    <EntityStatusBadge entityStatus={status} />\n  ) : null;\n\n  return (\n    <BaseCard\n      as={ENTRY_CARD_DEFAULT_TAG}\n      {...otherProps}\n      actions={actions}\n      badge={badge ? badge : entryStatusBadge}\n      className={cx(styles.root, className)}\n      withDragHandle={withDragHandle}\n      ref={forwardedRef}\n      type={contentType}\n      testId={testId}\n    >\n      <Flex\n        alignItems=\"center\"\n        className={styles.content(size)}\n        flexDirection=\"row\"\n      >\n        <Flex flexDirection=\"column\" flexGrow={1} gap=\"spacingS\">\n          <EntryCardTitle title={title} titleTag={titleTag} />\n          <EntryCardDescription size={size} description={description} />\n          {children}\n        </Flex>\n\n        {thumbnailElement && size !== 'small' && (\n          <figure className={styles.thumbnail(size)}>{thumbnailElement}</figure>\n        )}\n      </Flex>\n    </BaseCard>\n  );\n}\n\n_EntryCard.displayName = 'EntryCard';\n\nexport const EntryCard: PolymorphicComponent<\n  ExpandProps<EntryCardInternalProps>,\n  typeof ENTRY_CARD_DEFAULT_TAG\n> = forwardRef(_EntryCard);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nimport type { EntryCardSize } from './EntryCard.types';\n\nexport const getEntryCardStyles = () => {\n  return {\n    actionsButton: css({\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0,\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: tokens.borderRadiusMedium,\n    }),\n    content: (size?: EntryCardSize) =>\n      css({\n        gridColumn: 'content',\n        marginTop: size === 'small' ? tokens.spacingXs : tokens.spacingS,\n        marginBottom: size === 'small' ? `calc(-1 * ${tokens.spacingXs})` : 0,\n      }),\n    root: css({\n      padding: 0,\n      '[data-card-part=\"content\"]': {\n        paddingBottom: tokens.spacingM,\n        paddingLeft: tokens.spacingM,\n        paddingRight: tokens.spacingM,\n      },\n    }),\n    header: css({\n      borderBottomWidth: 1,\n      borderBottomColor: tokens.gray200,\n      borderBottomStyle: 'solid',\n      minHeight: 'auto',\n      paddingBottom: tokens.spacingXs,\n      paddingLeft: tokens.spacingM,\n      paddingRight: tokens.spacingXs,\n    }),\n    thumbnail: (size?: EntryCardSize) =>\n      css({\n        margin: `0 0 0 ${tokens.spacingS}`,\n        padding: 0,\n        overflow: 'hidden',\n        position: 'relative',\n        img: {\n          width: '100%',\n          height: '100%',\n          objectFit: 'cover',\n          position: 'absolute',\n          zIndex: 1,\n        },\n        ...(size === 'small'\n          ? {\n              height: '40px',\n              width: '40px',\n            }\n          : {\n              height: '70px',\n              width: '70px',\n            }),\n      }),\n  };\n};\n","import React from 'react';\nimport { cx } from 'emotion';\nimport { Tooltip } from '@contentful/f36-tooltip';\nimport { Text } from '@contentful/f36-typography';\nimport { Skeleton } from '@contentful/f36-skeleton';\n\nimport { BaseCard } from '../BaseCard/BaseCard';\nimport type { BaseCardDragHandleProps } from '../BaseCard/BaseCard.types';\nimport type { EntryCardInternalProps } from '../EntryCard/EntryCard.types';\nimport { getInlineEntryCardStyles } from './InlineEntryCard.styles';\nimport { CardActions } from '../BaseCard/CardActions';\n\nexport type InlineEntryCardInternalProps = Omit<\n  EntryCardInternalProps,\n  'icon' | 'ref' | 'src' | 'size' | 'type' | keyof BaseCardDragHandleProps\n>;\n\nexport type InlineEntryCardProps = InlineEntryCardInternalProps;\n\nexport const InlineEntryCard = ({\n  actions,\n  className,\n  children,\n  status,\n  title,\n  isLoading,\n  testId = 'cf-ui-inline-entry-card',\n  ...otherProps\n}: InlineEntryCardInternalProps) => {\n  const styles = getInlineEntryCardStyles();\n  const header = (\n    <CardActions buttonProps={{ className: styles.actions }}>\n      {actions}\n    </CardActions>\n  );\n\n  if (isLoading) {\n    return (\n      <Skeleton.Container\n        className={styles.skeleton}\n        svgHeight=\"1.25rem\"\n        svgWidth=\"6rem\"\n      >\n        <Skeleton.BodyText numberOfLines={1} />\n      </Skeleton.Container>\n    );\n  }\n\n  return (\n    <Tooltip placement=\"bottom\" content={title}>\n      <BaseCard\n        {...otherProps}\n        className={cx(styles.root({ status }), className)}\n        header={header}\n        testId={testId}\n      >\n        {children || <Text>{title}</Text>}\n      </BaseCard>\n    </Tooltip>\n  );\n};\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { getEntityStatusStyles } from '@contentful/f36-core';\n\nimport type { InlineEntryCardProps } from './InlineEntryCard';\n\nexport const getInlineEntryCardStyles = () => {\n  return {\n    actions: css({\n      display: 'flex',\n      padding: 0,\n      marginLeft: tokens.spacingXs,\n      minHeight: 'auto',\n    }),\n    root: ({ status }: { status: InlineEntryCardProps['status'] }) => {\n      const statusColors = getEntityStatusStyles({ status });\n\n      return css({\n        borderBottomLeftRadius: 0,\n        borderTopLeftRadius: 0,\n        display: 'inline-flex',\n        width: 'auto',\n        verticalAlign: 'middle',\n        paddingBottom: 0,\n        paddingTop: 0,\n        paddingLeft: tokens.spacingS,\n        paddingRight: tokens.spacing2Xs,\n        '[data-card-part=\"wrapper\"]': {\n          display: 'inline-flex',\n          flexDirection: 'row-reverse',\n        },\n        '&::before': {\n          backgroundColor: statusColors.color,\n          bottom: 0,\n          content: '\"\"',\n          display: 'block',\n          left: 0,\n          position: 'absolute',\n          top: 0,\n          width: tokens.spacing2Xs,\n        },\n      });\n    },\n    skeleton: css({\n      display: 'inline-flex',\n      border: `1px solid ${tokens.gray300}`,\n      borderTopRightRadius: tokens.borderRadiusMedium,\n      borderBottomRightRadius: tokens.borderRadiusMedium,\n      padding: tokens.spacingXs,\n    }),\n  };\n};\n"],"mappings":";AEsCsG,SAAAA,EAAA,EAAAC,GAAA,QAC9E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}