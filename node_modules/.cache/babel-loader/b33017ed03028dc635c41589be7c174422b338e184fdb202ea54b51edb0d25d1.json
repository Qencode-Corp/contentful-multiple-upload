{"ast":null,"code":"import queryString from 'query-string';\nconst apiUrl = \"https://api.qencode.com/v1/\"; //'https://qa-sfo2-api-do.qencode.com/v1/' // https://api-qa.qencode.com/v1/ \n\nconst QencodeApiRequest = async (method, data) => {\n  let requestData = queryString.stringify(data);\n  let response = await fetch(`${apiUrl}${method}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: requestData\n  });\n  let result = await response.json();\n  return result;\n};\n_c = QencodeApiRequest;\nexport { QencodeApiRequest };\nvar _c;\n$RefreshReg$(_c, \"QencodeApiRequest\");","map":{"version":3,"names":["queryString","apiUrl","QencodeApiRequest","method","data","requestData","stringify","response","fetch","headers","body","result","json","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Desktop/GITHUB/QENCODE/contentful-mult-upload/src/services/api.js"],"sourcesContent":["import queryString from 'query-string';\r\n\r\nconst apiUrl = \"https://api.qencode.com/v1/\"; //'https://qa-sfo2-api-do.qencode.com/v1/' // https://api-qa.qencode.com/v1/ \r\n\r\nconst QencodeApiRequest = async (method, data) => {\r\n  let requestData = queryString.stringify(data);\r\n\r\n  let response = await fetch(`${apiUrl}${method}`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n    },\r\n    body: requestData,\r\n  });\r\n\r\n  let result = await response.json();\r\n  return result;\r\n};\r\n\r\nexport { QencodeApiRequest };\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,cAAc;AAEtC,MAAMC,MAAM,GAAG,6BAA6B,CAAC,CAAC;;AAE9C,MAAMC,iBAAiB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,IAAI,KAAK;EAChD,IAAIC,WAAW,GAAGL,WAAW,CAACM,SAAS,CAACF,IAAI,CAAC;EAE7C,IAAIG,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,MAAO,GAAEE,MAAO,EAAC,EAAE;IAC/CA,MAAM,EAAE,MAAM;IACdM,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEL;EACR,CAAC,CAAC;EAEF,IAAIM,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAClC,OAAOD,MAAM;AACf,CAAC;AAACE,EAAA,GAbIX,iBAAiB;AAevB,SAASA,iBAAiB;AAAG,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}